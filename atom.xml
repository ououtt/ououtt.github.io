<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-07T12:40:55.845Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gzm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>edas的测试路由</title>
    <link href="http://yoursite.com/2018/04/26/edas%E7%9A%84%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2018/04/26/edas的测试路由/</id>
    <published>2018-04-26T02:58:10.000Z</published>
    <updated>2018-05-07T12:40:55.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EDAS测试路由"><a href="#EDAS测试路由" class="headerlink" title="EDAS测试路由"></a>EDAS测试路由</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>edas是一个分布式集群的治理工具,具有监控运维等功能.但是它只能内网ip调用,本地测试并不能调通需要的服务,如果只能发布到测试edas进行测试的话,这对开发效率是不利的,在联调阶段可能会需要频繁发布edas来测试功能.现在的目标就是推出一个路由方案,满足本地测试调用edas的接口.</p><h2 id="方案一-版本区分"><a href="#方案一-版本区分" class="headerlink" title="方案一:版本区分"></a>方案一:版本区分</h2><p>配置edas环境的服务版本统一配置为1.0.0.daily.在ECS上同时发布一套镜像服务,该服务不使用edas治理并且版本统一为1.0.0.dev.本地测试版本统一为1.0.0.dev,因此本地只会调用ECS上的服务.注意ECS需要通过配置名DUBBO_IP_TO_BIND=(外网ip)来暴露本机的外网ip.</p><p>缺点:需要发布两套服务,增加发布成本,浪费服务器资源.</p><h2 id="方案二-版本路由"><a href="#方案二-版本路由" class="headerlink" title="方案二:版本路由"></a>方案二:版本路由</h2><p>EDAS环境统一1.0.0.daily版本,本地1.0.0.dev版本.路由吃所有的dubbo的api包,既作为消费者又作为提供者,只是消费者的版本是1.0.0.daily去消费edas上的服务,提供者的版本是1.0.0.dev接受本地的调用.</p><p>配置文件示例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">version</span>=<span class="string">"1.0.0.dev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">version</span>=<span class="string">"1.0.0.daily"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中所有的api实现方式是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProviderImpl</span> <span class="keyword">implements</span> <span class="title">HelloProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    HelloProvider helloProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProvider.say(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方案相对于第一个版本,虽然可以少发点应用,对机器资源有所减少,但是有编码成本,api包的变动也会需要重新发布路由,导致路由应用的频繁发布.</p><h2 id="泛化调用"><a href="#泛化调用" class="headerlink" title="泛化调用"></a>泛化调用</h2><p>首先,必须确定路由是不会依赖相应的api包的,dubbo也提供了泛化调用可以通过字符串的形式调用相应服务和方法.查看dubbo的泛化服务的api:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericService</span> </span>&#123;</span><br><span class="line">    Object $invoke(String method, String[] parameterTypes, Object[] args) <span class="keyword">throws</span> GenericException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由调用也必须要有处理不同版本和分组的能力,因此可以确定路由的服务的api:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouterProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">trans</span><span class="params">(String interfaceName, String methodName, String[] parameterTypes, Object[] paramList, String group, String version)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来,问题就是如何通过编码的形式调用泛化服务:</p><ol><li><p>应用配置</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationConfig application = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">application.setName(name);</span><br></pre></td></tr></table></figure></li><li><p>注册中心配置</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">registryConfig.setProtocol(protocol);<span class="comment">//"zookeeper"</span></span><br><span class="line">registryConfig.setAddress(address);</span><br><span class="line">registryConfig.setTimeout(timeOut);</span><br></pre></td></tr></table></figure></li><li><p>泛化服务配置</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReferenceConfig referenceConfig = <span class="keyword">new</span> ReferenceConfig&lt;&gt;();</span><br><span class="line">referenceConfig.setApplication(application);</span><br><span class="line">referenceConfig.setRegistry(registryConfig);</span><br><span class="line"><span class="comment">//设置泛化调用</span></span><br><span class="line">referenceConfig.setGeneric(<span class="keyword">true</span>);</span><br><span class="line">referenceConfig.setInterface(interfaceName);<span class="comment">//接口名字</span></span><br><span class="line">referenceConfig.setVersion(version);<span class="comment">//版本</span></span><br><span class="line">referenceConfig.setGroup(group);<span class="comment">//分组</span></span><br></pre></td></tr></table></figure></li><li><p>强转成泛化服务并调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GenericService genericService = (GenericService) referenceConfig.get();</span><br><span class="line">genericService.$invoke(methodName, parameterTypes, paramList);</span><br></pre></td></tr></table></figure></li><li><p>对于相同接口、分组和版本的referenceConfig可以通过map进行缓存.</p></li></ol><h2 id="方案三-动态代理"><a href="#方案三-动态代理" class="headerlink" title="方案三:动态代理"></a>方案三:动态代理</h2><p><img src="/2018/04/26/edas的测试路由/方案三.png" alt="方案三"></p><p>基本的思路是项目中所有引用的服务都是通过注解的形式注入的,那么它们就都有一个共同点:即都被<code>@Reference</code>注解,将这些特点的属性都替换为动态代理类,而动态代理类则去调用路由的api.</p><p>现在的问题就是变成了什么时候做代理？在看dubbo源码的时候,发现dubbo是通过spring的<code>BeanPostProcessor</code>做的扩展,但是它还实现了<code>PriorityOrdered</code>接口,因此该dubbo的<code>ReferenceAnnotationBeanPostProcessor</code>类是优先级最高的.所以,同样通过实现<code>BeanPostProcessor</code>接口对满足条件的bean属性做动态代理就可以了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    Class c = bean.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试了一下,dubbo¬2.5.7不支持对父类属性的注入,但是2.5.10是支持的</span></span><br><span class="line">    <span class="comment">//这里都做了支持,所以需要开发时注意版本</span></span><br><span class="line">    <span class="keyword">while</span> (c != Object.class) &#123;</span><br><span class="line">        injectReference(c, bean);</span><br><span class="line">        c = c.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">injectReference</span><span class="params">(Class c, Object bean)</span> </span>&#123;</span><br><span class="line">    Field[] fields = c.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fields == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        Reference reference = field.getAnnotation(Reference.class);</span><br><span class="line">        <span class="comment">//遍历找到dubbo的reference注解</span></span><br><span class="line">        <span class="keyword">if</span> (reference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class interfaceClass = field.getType();</span><br><span class="line">            <span class="comment">//过滤路由本身的接口</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceClass == RouterProvider.class) &#123;</span><br><span class="line">                logger.info(<span class="string">"过滤路由接口"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断该属性是否是接口(dubbo应该也有校验)</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                logger.error(<span class="string">"该属性不是接口&#123;&#125;,&#123;&#125;"</span>, field.getType(), interfaceClass.getName());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成代理类</span></span><br><span class="line">            Object proxy = getProxy(reference, interfaceClass);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//将生成的代理类代替原来的属性</span></span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(bean, proxy);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"属性设置失败,filed:"</span> + field.getName() + <span class="string">" class:"</span> + c.getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getProxy</span><span class="params">(Reference reference, Class interfaceClass)</span> </span>&#123;</span><br><span class="line">    String key = RouterUtils.generateReferenceBeanCacheKey(reference, interfaceClass);</span><br><span class="line">    Object proxy = proxyMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (proxy != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">"生成代理对象:&#123;&#125;"</span>, key);</span><br><span class="line">    <span class="comment">//支持在reference注解上配置版本、分组,如果没有配置那么就使用consumer上的默认配置</span></span><br><span class="line">    String _group = StringUtils.isEmpty(reference.group()) ? group : reference.group();</span><br><span class="line">    String _version = StringUtils.isEmpty(reference.version()) ? version : reference.version();</span><br><span class="line">    RouterProxyHandler routerProxyHandler = <span class="keyword">new</span> RouterProxyHandler(routerProvider, interfaceClass, _group, _version);</span><br><span class="line">    proxy = Proxy.newProxyInstance(interfaceClass.getClassLoader(), <span class="keyword">new</span> Class[]&#123;interfaceClass&#125;, routerProxyHandler);</span><br><span class="line">    proxyMap.putIfAbsent(key, proxy);</span><br><span class="line">    <span class="keyword">return</span> proxyMap.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是java动态代理的处理类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RouterProxyHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RouterProvider routerProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class interfaceClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际需要调用的分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际需要调用的版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    RouterProxyHandler(RouterProvider routerProvider, Class interfaceClass, String group, String version) &#123;</span><br><span class="line">        <span class="keyword">this</span>.routerProvider = routerProvider;</span><br><span class="line">        <span class="keyword">this</span>.interfaceClass = interfaceClass;</span><br><span class="line">        <span class="keyword">this</span>.group = group;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        logger.info(<span class="string">"路由调用&#123;&#125;方法"</span>, methodName);</span><br><span class="line">        <span class="comment">//调用路由的api接口</span></span><br><span class="line">        Object o = routerProvider.trans(interfaceClass.getName(), methodName, getParameterTypes(args), args, group, version);</span><br><span class="line">        <span class="comment">//返回类型</span></span><br><span class="line">        Class returnType = method.getReturnType();</span><br><span class="line">        <span class="comment">//返回的泛化类型,GWResult&lt;...&gt;</span></span><br><span class="line">        Type genericReturnType = method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            <span class="keyword">return</span> PojoUtils.realize(o, returnType, genericReturnType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"反序列化失败:&#123;&#125;"</span>, o.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到参数数组的类型(字符串形式)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 参数的类型(字符串形式)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] getParameterTypes(Object[] args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] parameterTypes = <span class="keyword">new</span> String[args.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            parameterTypes[i] = args[i].getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parameterTypes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案四-dubbo-filter"><a href="#方案四-dubbo-filter" class="headerlink" title="方案四:dubbo filter"></a>方案四:dubbo filter</h2><p>方案三虽然已经满足项目的要求,但是它是有适用性的,即只能对注解配置的dubbo reference有效,而且,大项目测试过程中,需要扫bean然后生成几十个代理类,会拖累测试的启动速度.基于此,有没有一种在调用时拦截并调用路由的方案呢?在对dubbo的调用链路进行理解后,发现dubbo就提供了filter的扩展点,先将示意图贴上:<br><img src="/2018/04/26/edas的测试路由/方案四.png" alt="方案四"></p><h3 id="spi注解"><a href="#spi注解" class="headerlink" title="spi注解"></a>spi注解</h3><p>要使用dubbo filter那么就需要首先理解dubbo的spi机制,简单讲一下.</p><h4 id="SPI"><a href="#SPI" class="headerlink" title="@SPI"></a>@SPI</h4><p>spi注解标注在扩展接口上,该注解的值表明是该扩展接口的默认实现.</p><h4 id="Adaptive"><a href="#Adaptive" class="headerlink" title="@Adaptive"></a>@Adaptive</h4><ol><li>该注解标注在类上表明该类是其spi接口的适配实现.</li><li>注解在spi的接口方法上,表明该方法会通过源代码生成一个适配实现,这个方法的入参中必须有URL类型或者有无参且返回类型是URL的方法.源代码生成的默认实现仅仅是从URL中根据@Adaptive注解的值为键取得相应的实现,如果没有取得就采用默认实现.</li></ol><h4 id="Activate"><a href="#Activate" class="headerlink" title="@Activate"></a>@Activate</h4><p>这个注解就与filter有关了,<code>protocol</code>接口的包装类<code>ProtocolFilterWrapper</code>会取得所有满足条件的filter构成链,最终调用的时候就会先调用filter链.</p><p>解释一下该注解的属性:</p><h5 id="group"><a href="#group" class="headerlink" title="group"></a>group</h5><p>有两个值可选:consumer和provider.表明该filter在消费端或者提供者生效,没有值即两种情况都生效.可以看<code>ProtocolFilterWrapper</code>在refer和export方法指定了相应的值.</p><h5 id="value"><a href="#value" class="headerlink" title="value"></a>value</h5><p>URL中有相应value的非false值才会生效.</p><h5 id="before-after-order"><a href="#before-after-order" class="headerlink" title="before,after,order"></a>before,after,order</h5><p>这三个值指定了filter的调用顺序,具体可以看<code>ActivateComparator</code>这个类是怎么排序的.</p><h3 id="spi使用"><a href="#spi使用" class="headerlink" title="spi使用"></a>spi使用</h3><p>spi的使用非常简单,首先建一个文件,文件的目录必须是META-INF/services/,META-INF/dubbo/和META-INF/dubbo/internal/的其中一个.文件的名字必须是扩展接口的全类名,示例:com.alibaba.dubbo.rpc.Filter.内容是键值对的形式,键为对象的名字,值是该扩展接口的实现类,示例:router=com.sxc.dubbo.router.filter.RouterFilter.</p><h3 id="RouterFilter"><a href="#RouterFilter" class="headerlink" title="RouterFilter"></a>RouterFilter</h3><p>现在是怎么实现该filter?首先,肯定要将路由api的实现注入进来,这也可以使用dubbo提供的<code>ExtensionFactory</code>来得到.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以看到ExtensionFactory接口的适配实现只是从所有的ExtensionFactory实现中去取相应的对象</span></span><br><span class="line"><span class="comment">//SpiExtensionFactory是从dubbo管理的对象中去取</span></span><br><span class="line"><span class="comment">//SpringExtensionFactory通过spring上下文中通过名字和类型去取</span></span><br><span class="line">routerProvider = ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension().getExtension(RouterProvider.class, <span class="string">"router"</span>;</span><br></pre></td></tr></table></figure><p>现在是要找到所有路由api需要的入参.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到url</span></span><br><span class="line">URL url = invoker.getUrl();</span><br><span class="line"><span class="comment">//得到接口class</span></span><br><span class="line">Class interfaceClass = invoker.getInterface();</span><br><span class="line"><span class="comment">//如果就是路由本身就直接进行下一个filter</span></span><br><span class="line"><span class="keyword">if</span> (RouterProvider.class == interfaceClass) &#123;</span><br><span class="line">    <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到方法名字</span></span><br><span class="line">String methodName = invocation.getMethodName();</span><br><span class="line">Method method = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//得到方法,这里理论上是肯定有该方法的</span></span><br><span class="line">    method = interfaceClass.getMethod(methodName, invocation.getParameterTypes());</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用路由provider</span></span><br><span class="line">Object o = routerProvider.trans(interfaceClass.getName(), methodName, getParameterTypesStr(invocation.getParameterTypes()),</span><br><span class="line">        invocation.getArguments(), url.getParameter(<span class="string">"group"</span>), url.getParameter(<span class="string">"version"</span>));</span><br><span class="line"><span class="comment">//返回类型</span></span><br><span class="line">Class returnType = method.getReturnType();</span><br><span class="line"><span class="comment">//返回类型,包含泛化类型</span></span><br><span class="line">Type g = method.getGenericReturnType();</span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">o = PojoUtils.realize(o, returnType, g);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RpcResult(o);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] getParameterTypesStr(Class[] args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] parameterTypes = <span class="keyword">new</span> String[args.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        parameterTypes[i] = args[i].getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parameterTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EDAS测试路由&quot;&gt;&lt;a href=&quot;#EDAS测试路由&quot; class=&quot;headerlink&quot; title=&quot;EDAS测试路由&quot;&gt;&lt;/a&gt;EDAS测试路由&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>AbstractConfig</title>
    <link href="http://yoursite.com/2018/04/23/AbstractConfig/"/>
    <id>http://yoursite.com/2018/04/23/AbstractConfig/</id>
    <published>2018-04-23T07:15:00.000Z</published>
    <updated>2018-04-23T07:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AbstractConfig"><a href="#AbstractConfig" class="headerlink" title="AbstractConfig"></a>AbstractConfig</h1><p>这是dubbo配置类的基类,dubbo中基本所有配置类都从该类继承(目前只有ArgumentConfig不是),该类只有id一个属性,因此主要是看一下它的一些静态方法.</p><h2 id="关闭的钩子函数"><a href="#关闭的钩子函数" class="headerlink" title="关闭的钩子函数"></a>关闭的钩子函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(<span class="string">"Run shutdown hook now."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ProtocolConfig.destroyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"DubboShutdownHook"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java原有提供finalize来作为对象回收时的调用的方法,但是早已不推荐使用(个人理解是jvm对象回收的原因),因此额外提供了Runtime.getRuntime().addShutdownHook来作为新的钩子函数,dubbo利用其调用了解析配置的destroyAll方法.</p><h2 id="appendProperties"><a href="#appendProperties" class="headerlink" title="appendProperties"></a>appendProperties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法主要是为了支持环境变量的属性配置</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">appendProperties</span><span class="params">(AbstractConfig config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getTagName是将类名去掉后缀,dubbo配置累的后缀主要是Config,也有ReferenceBean这样的Bean结尾的</span></span><br><span class="line">    <span class="comment">//类名对应的配置标签前面加上dubbo.的通用前缀</span></span><br><span class="line">    String prefix = <span class="string">"dubbo."</span> + getTagName(config.getClass()) + <span class="string">"."</span>;</span><br><span class="line">    Method[] methods = config.getClass().getMethods();</span><br><span class="line">    <span class="comment">//遍历方法,找到set开头的,参数只有一个且是基本类型(包括基本类型的包装类和String,Object)的public方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            <span class="keyword">if</span> (name.length() &gt; <span class="number">3</span> &amp;&amp; name.startsWith(<span class="string">"set"</span>) &amp;&amp; Modifier.isPublic(method.getModifiers())</span><br><span class="line">                    &amp;&amp; method.getParameterTypes().length == <span class="number">1</span> &amp;&amp; isPrimitive(method.getParameterTypes()[<span class="number">0</span>])) &#123;</span><br><span class="line">                <span class="comment">//驼峰方法名转化:AppleTree转化为apple.tree</span></span><br><span class="line">                String property = StringUtils.camelToSplitName(name.substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + name.substring(<span class="number">4</span>), <span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">                String value = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//拿到所有的id,因为配置类继承自AbstractConfig,因此基本都有id属性,把id配置到属性的前面</span></span><br><span class="line">                <span class="keyword">if</span> (config.getId() != <span class="keyword">null</span> &amp;&amp; config.getId().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    String pn = prefix + config.getId() + <span class="string">"."</span> + property;</span><br><span class="line">                    value = System.getProperty(pn);<span class="comment">//从环境中拿</span></span><br><span class="line">                    <span class="keyword">if</span> (!StringUtils.isBlank(value)) &#123;</span><br><span class="line">                        logger.info(<span class="string">"Use System Property "</span> + pn + <span class="string">" to config dubbo"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果没有指定了id的属性,那么就从环境中拿不指定id的属性,注意区分pn的不同</span></span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    String pn = prefix + property;</span><br><span class="line">                    value = System.getProperty(pn);</span><br><span class="line">                    <span class="keyword">if</span> (!StringUtils.isBlank(value)) &#123;</span><br><span class="line">                        logger.info(<span class="string">"Use System Property "</span> + pn + <span class="string">" to config dubbo"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//环境中没有,那么就调用相应get或is方法</span></span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    Method getter;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        getter = config.getClass().getMethod(<span class="string">"get"</span> + name.substring(<span class="number">3</span>), <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            getter = config.getClass().getMethod(<span class="string">"is"</span> + name.substring(<span class="number">3</span>), <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException e2) &#123;</span><br><span class="line">                            getter = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (getter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (getter.invoke(config, <span class="keyword">new</span> Object[<span class="number">0</span>]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (config.getId() != <span class="keyword">null</span> &amp;&amp; config.getId().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                value = ConfigUtils.getProperty(prefix + config.getId() + <span class="string">"."</span> + property);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                                value = ConfigUtils.getProperty(prefix + property);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                                String legacyKey = legacyProperties.get(prefix + property);</span><br><span class="line">                                <span class="keyword">if</span> (legacyKey != <span class="keyword">null</span> &amp;&amp; legacyKey.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    value = convertLegacyValue(legacyKey, ConfigUtils.getProperty(legacyKey));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    method.invoke(config, <span class="keyword">new</span> Object[]&#123;convertPrimitive(method.getParameterTypes()[<span class="number">0</span>], value)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AbstractConfig&quot;&gt;&lt;a href=&quot;#AbstractConfig&quot; class=&quot;headerlink&quot; title=&quot;AbstractConfig&quot;&gt;&lt;/a&gt;AbstractConfig&lt;/h1&gt;&lt;p&gt;这是dubbo配置类的基类,dubbo中基本
      
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>spring配置解析</title>
    <link href="http://yoursite.com/2018/04/19/spring%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/04/19/spring配置解析/</id>
    <published>2018-04-19T12:10:30.000Z</published>
    <updated>2018-04-23T07:35:19.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><p>spring作为java开发使用最广的框架,dubbo当然做了支持,其实dubbo的支持就是通过spring的扩展实现的.</p><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>spring会加载classpath下的spring.handlers和spring.schemas文件,这两个文件分别申明了xml文件的解析器和xsd文件.其中xsd文件申明了xml文件可以有哪些元素,handler是对xml的解析类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//版本检查</span></span><br><span class="line">    Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> AnnotationBeanDefinitionParser ());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到DubboNamespaceHandler的代码非常简单,继承的NamespaceHandlerSupport是spring提供的一个命名空间解析的支持类,然后在初始化方法中注册了application,module等标签名字以及对应的解析类.</p><h2 id="DubboBeanDefinitionParser"><a href="#DubboBeanDefinitionParser" class="headerlink" title="DubboBeanDefinitionParser"></a>DubboBeanDefinitionParser</h2><p>DubboBeanDefinitionParser继承了BeanDefinitionParser接口,该接口负责解析xml成为BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析xml得到RootBeanDefinition放入上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element xml元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parserContext 解析上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanClass 该xml对应的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> required 是否需要</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext, Class&lt;?&gt; beanClass, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">    RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line">    beanDefinition.setBeanClass(beanClass);</span><br><span class="line">    beanDefinition.setLazyInit(<span class="keyword">false</span>);</span><br><span class="line">    String id = element.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((id == <span class="keyword">null</span> || id.length() == <span class="number">0</span>) &amp;&amp; required) &#123;</span><br><span class="line">        <span class="comment">//没有声明id就先找name</span></span><br><span class="line">        String generatedBeanName = element.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (generatedBeanName == <span class="keyword">null</span> || generatedBeanName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//没有声明id和name就找interface,注意ProtocolConfig类型默认为dubbo,因为dubbo是protocol的spi默认值</span></span><br><span class="line">            <span class="keyword">if</span> (ProtocolConfig.class.equals(beanClass)) &#123;</span><br><span class="line">                generatedBeanName = <span class="string">"dubbo"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                generatedBeanName = element.getAttribute(<span class="string">"interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以上都没有就默认为类型的全类名</span></span><br><span class="line">        <span class="keyword">if</span> (generatedBeanName == <span class="keyword">null</span> || generatedBeanName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            generatedBeanName = beanClass.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        id = generatedBeanName;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//如果该名字已经存在就加上后缀数字</span></span><br><span class="line">        <span class="keyword">while</span> (parserContext.getRegistry().containsBeanDefinition(id)) &#123;</span><br><span class="line">            id = generatedBeanName + (counter++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parserContext.getRegistry().containsBeanDefinition(id)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Duplicate spring bean id "</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在上下文中注册该bean,并在beanDefinition的属性中加入id</span></span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"id"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//协议类型的bean需要遍历所有bean找到属性名字为protocol类型是ProtocolConfig然后注入该bean</span></span><br><span class="line">    <span class="keyword">if</span> (ProtocolConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : parserContext.getRegistry().getBeanDefinitionNames()) &#123;</span><br><span class="line">            BeanDefinition definition = parserContext.getRegistry().getBeanDefinition(name);</span><br><span class="line">            PropertyValue property = definition.getPropertyValues().getPropertyValue(<span class="string">"protocol"</span>);</span><br><span class="line">            <span class="keyword">if</span> (property != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object value = property.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ProtocolConfig &amp;&amp; id.equals(((ProtocolConfig) value).getName())) &#123;</span><br><span class="line">                    <span class="comment">//RuntimeBeanReference是Spring解析时的标注,表明该属性是一个其他的bean</span></span><br><span class="line">                    definition.getPropertyValues().addPropertyValue(<span class="string">"protocol"</span>, <span class="keyword">new</span> RuntimeBeanReference(id));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ServiceBean.class.equals(beanClass)) &#123;</span><br><span class="line">        String className = element.getAttribute(<span class="string">"class"</span>);</span><br><span class="line">        <span class="keyword">if</span> (className != <span class="keyword">null</span> &amp;&amp; className.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            RootBeanDefinition classDefinition = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line">            classDefinition.setBeanClass(ReflectUtils.forName(className));</span><br><span class="line">            classDefinition.setLazyInit(<span class="keyword">false</span>);</span><br><span class="line">            parseProperties(element.getChildNodes(), classDefinition);</span><br><span class="line">            beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"ref"</span>, <span class="keyword">new</span> BeanDefinitionHolder(classDefinition, id + <span class="string">"Impl"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ProviderConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        parseNested(element, parserContext, ServiceBean.class, <span class="keyword">true</span>, <span class="string">"service"</span>, <span class="string">"provider"</span>, id, beanDefinition);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumerConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        parseNested(element, parserContext, ReferenceBean.class, <span class="keyword">false</span>, <span class="string">"reference"</span>, <span class="string">"consumer"</span>, id, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; props = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    ManagedMap parameters = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Method setter : beanClass.getMethods()) &#123;</span><br><span class="line">        String name = setter.getName();</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt; <span class="number">3</span> &amp;&amp; name.startsWith(<span class="string">"set"</span>)</span><br><span class="line">                &amp;&amp; Modifier.isPublic(setter.getModifiers())</span><br><span class="line">                &amp;&amp; setter.getParameterTypes().length == <span class="number">1</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; type = setter.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">            String property = StringUtils.camelToSplitName(name.substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + name.substring(<span class="number">4</span>), <span class="string">"-"</span>);</span><br><span class="line">            props.add(property);</span><br><span class="line">            Method getter = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getter = beanClass.getMethod(<span class="string">"get"</span> + name.substring(<span class="number">3</span>), <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    getter = beanClass.getMethod(<span class="string">"is"</span> + name.substring(<span class="number">3</span>), <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoSuchMethodException e2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (getter == <span class="keyword">null</span></span><br><span class="line">                    || !Modifier.isPublic(getter.getModifiers())</span><br><span class="line">                    || !type.equals(getter.getReturnType())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"parameters"</span>.equals(property)) &#123;</span><br><span class="line">                parameters = parseParameters(element.getChildNodes(), beanDefinition);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"methods"</span>.equals(property)) &#123;</span><br><span class="line">                parseMethods(id, element.getChildNodes(), beanDefinition, parserContext);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"arguments"</span>.equals(property)) &#123;</span><br><span class="line">                parseArguments(id, element.getChildNodes(), beanDefinition, parserContext);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String value = element.getAttribute(property);</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    value = value.trim();</span><br><span class="line">                    <span class="keyword">if</span> (value.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"registry"</span>.equals(property) &amp;&amp; RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) &#123;</span><br><span class="line">                            RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">                            registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);</span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, registryConfig);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"registry"</span>.equals(property) &amp;&amp; value.indexOf(<span class="string">','</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            parseMultiRef(<span class="string">"registries"</span>, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"provider"</span>.equals(property) &amp;&amp; value.indexOf(<span class="string">','</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            parseMultiRef(<span class="string">"providers"</span>, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"protocol"</span>.equals(property) &amp;&amp; value.indexOf(<span class="string">','</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            parseMultiRef(<span class="string">"protocols"</span>, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Object reference;</span><br><span class="line">                            <span class="keyword">if</span> (isPrimitive(type)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (<span class="string">"async"</span>.equals(property) &amp;&amp; <span class="string">"false"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"timeout"</span>.equals(property) &amp;&amp; <span class="string">"0"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"delay"</span>.equals(property) &amp;&amp; <span class="string">"0"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"version"</span>.equals(property) &amp;&amp; <span class="string">"0.0.0"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"stat"</span>.equals(property) &amp;&amp; <span class="string">"-1"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"reliable"</span>.equals(property) &amp;&amp; <span class="string">"false"</span>.equals(value)) &#123;</span><br><span class="line">                                    <span class="comment">// backward compatibility for the default value in old version's xsd</span></span><br><span class="line">                                    value = <span class="keyword">null</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = value;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"protocol"</span>.equals(property)</span><br><span class="line">                                    &amp;&amp; ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(value)</span><br><span class="line">                                    &amp;&amp; (!parserContext.getRegistry().containsBeanDefinition(value)</span><br><span class="line">                                    || !ProtocolConfig.class.getName().equals(parserContext.getRegistry().getBeanDefinition(value).getBeanClassName()))) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (<span class="string">"dubbo:provider"</span>.equals(element.getTagName())) &#123;</span><br><span class="line">                                    logger.warn(<span class="string">"Recommended replace &lt;dubbo:provider protocol=\""</span> + value + <span class="string">"\" ... /&gt; to &lt;dubbo:protocol name=\""</span> + value + <span class="string">"\" ... /&gt;"</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">// backward compatibility</span></span><br><span class="line">                                ProtocolConfig protocol = <span class="keyword">new</span> ProtocolConfig();</span><br><span class="line">                                protocol.setName(value);</span><br><span class="line">                                reference = protocol;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"onreturn"</span>.equals(property)) &#123;</span><br><span class="line">                                <span class="keyword">int</span> index = value.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">                                String returnRef = value.substring(<span class="number">0</span>, index);</span><br><span class="line">                                String returnMethod = value.substring(index + <span class="number">1</span>);</span><br><span class="line">                                reference = <span class="keyword">new</span> RuntimeBeanReference(returnRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"onreturnMethod"</span>, returnMethod);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"onthrow"</span>.equals(property)) &#123;</span><br><span class="line">                                <span class="keyword">int</span> index = value.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">                                String throwRef = value.substring(<span class="number">0</span>, index);</span><br><span class="line">                                String throwMethod = value.substring(index + <span class="number">1</span>);</span><br><span class="line">                                reference = <span class="keyword">new</span> RuntimeBeanReference(throwRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"onthrowMethod"</span>, throwMethod);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"oninvoke"</span>.equals(property)) &#123;</span><br><span class="line">                                <span class="keyword">int</span> index = value.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">                                String invokeRef = value.substring(<span class="number">0</span>, index);</span><br><span class="line">                                String invokeRefMethod = value.substring(index + <span class="number">1</span>);</span><br><span class="line">                                reference = <span class="keyword">new</span> RuntimeBeanReference(invokeRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"oninvokeMethod"</span>, invokeRefMethod);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (<span class="string">"ref"</span>.equals(property) &amp;&amp; parserContext.getRegistry().containsBeanDefinition(value)) &#123;</span><br><span class="line">                                    BeanDefinition refBean = parserContext.getRegistry().getBeanDefinition(value);</span><br><span class="line">                                    <span class="keyword">if</span> (!refBean.isSingleton()) &#123;</span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The exported service ref "</span> + value + <span class="string">" must be singleton! Please set the "</span> + value + <span class="string">" bean scope to singleton, eg: &lt;bean id=\""</span> + value + <span class="string">"\" scope=\"singleton\" ...&gt;"</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = <span class="keyword">new</span> RuntimeBeanReference(value);</span><br><span class="line">                            &#125;</span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, reference);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    NamedNodeMap attributes = element.getAttributes();</span><br><span class="line">    <span class="keyword">int</span> len = attributes.getLength();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        Node node = attributes.item(i);</span><br><span class="line">        String name = node.getLocalName();</span><br><span class="line">        <span class="keyword">if</span> (!props.contains(name)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parameters == <span class="keyword">null</span>) &#123;</span><br><span class="line">                parameters = <span class="keyword">new</span> ManagedMap();</span><br><span class="line">            &#125;</span><br><span class="line">            String value = node.getNodeValue();</span><br><span class="line">            parameters.put(name, <span class="keyword">new</span> TypedStringValue(value, String.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parameters != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"parameters"</span>, parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring&quot;&gt;&lt;a href=&quot;#spring&quot; class=&quot;headerlink&quot; title=&quot;spring&quot;&gt;&lt;/a&gt;spring&lt;/h1&gt;&lt;p&gt;spring作为java开发使用最广的框架,dubbo当然做了支持,其实dubbo的支持就是通过spring
      
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>URL</title>
    <link href="http://yoursite.com/2018/04/19/URL/"/>
    <id>http://yoursite.com/2018/04/19/URL/</id>
    <published>2018-04-19T02:20:23.000Z</published>
    <updated>2018-04-19T12:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>Dubbo框架是以URL为总线的模式,即运行过程中所有的状态数据信息都可以通过URL来获取,比如当前系统采用什么序列化,采用什么通信,采用什么负载均衡等信息,都是通过URL的参数来呈现的,所以在框架运行过程中,运行到某个阶段需要相应的数据,都可以通过对应的Key从URL的参数列表中获取.ExtensionLoader的Adaptive生成源码实现就是从URL中获取是否有定义的扩展类名字.</p><h2 id="字符串解析"><a href="#字符串解析" class="headerlink" title="字符串解析"></a>字符串解析</h2><p>字符串格式:protocol://username:password@host:port/path?key=value&amp;key=value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从字符串解析url,字符串格式如上方所示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> URL <span class="title">valueOf</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="keyword">null</span> || (url = url.trim()).length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String protocol = <span class="keyword">null</span>;</span><br><span class="line">    String username = <span class="keyword">null</span>;</span><br><span class="line">    String password = <span class="keyword">null</span>;</span><br><span class="line">    String host = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line">    String path = <span class="keyword">null</span>;</span><br><span class="line">    Map&lt;String, String&gt; parameters = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//问号后面的是参数</span></span><br><span class="line">    <span class="keyword">int</span> i = url.indexOf(<span class="string">"?"</span>); <span class="comment">// seperator between body and parameters</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//参数之间以&amp;分隔</span></span><br><span class="line">        String[] parts = url.substring(i + <span class="number">1</span>).split(<span class="string">"\\&amp;"</span>);</span><br><span class="line">        parameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String part : parts) &#123;</span><br><span class="line">            part = part.trim();</span><br><span class="line">            <span class="keyword">if</span> (part.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//键值对的形式</span></span><br><span class="line">                <span class="keyword">int</span> j = part.indexOf(<span class="string">'='</span>);</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    parameters.put(part.substring(<span class="number">0</span>, j), part.substring(j + <span class="number">1</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//没有=号代表键值对都是该字符本身</span></span><br><span class="line">                    parameters.put(part, part);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        url = url.substring(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//协议protocol在://之前</span></span><br><span class="line">    i = url.indexOf(<span class="string">"://"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"url missing protocol: \""</span> + url + <span class="string">"\""</span>);</span><br><span class="line">        protocol = url.substring(<span class="number">0</span>, i);</span><br><span class="line">        url = url.substring(i + <span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//:/的协议</span></span><br><span class="line">        <span class="comment">// case: file:/path/to/file.txt</span></span><br><span class="line">        i = url.indexOf(<span class="string">":/"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"url missing protocol: \""</span> + url + <span class="string">"\""</span>);</span><br><span class="line">            protocol = url.substring(<span class="number">0</span>, i);</span><br><span class="line">            url = url.substring(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到现在的第一个/,分隔host和path</span></span><br><span class="line">    i = url.indexOf(<span class="string">"/"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        path = url.substring(i + <span class="number">1</span>);</span><br><span class="line">        url = url.substring(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//host之前可能有用户名密码</span></span><br><span class="line">    i = url.indexOf(<span class="string">"@"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        username = url.substring(<span class="number">0</span>, i);</span><br><span class="line">        <span class="keyword">int</span> j = username.indexOf(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            password = username.substring(j + <span class="number">1</span>);</span><br><span class="line">            username = username.substring(<span class="number">0</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        url = url.substring(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//host和port以:分隔</span></span><br><span class="line">    i = url.indexOf(<span class="string">":"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; url.length() - <span class="number">1</span>) &#123;</span><br><span class="line">        port = Integer.parseInt(url.substring(i + <span class="number">1</span>));</span><br><span class="line">        url = url.substring(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (url.length() &gt; <span class="number">0</span>) host = url;</span><br><span class="line">    <span class="comment">//调用构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> URL(protocol, username, password, host, port, path, parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h2><p>url编码就是一个字符ascii码的十六进制.不过稍微有些变动,需要在前面加上“%”.比如“\”,它的ascii码是92,92的十六进制是5c,所以“\”的url编码就是%5c.那么汉字的url编码呢？很简单,看例子:“胡”的ascii码是-17670,十六进制是BAFA,url编码是“%BA%FA”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> URLEncoder.encode(value, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> URLDecoder.decode(value, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String protocol;<span class="comment">//协议</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String username;<span class="comment">//用户名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String password;<span class="comment">//密码</span></span><br><span class="line"><span class="comment">// by default, host to registry</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String host;<span class="comment">//域名</span></span><br><span class="line"><span class="comment">// by default, port to registry</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;<span class="comment">//端口号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String path;<span class="comment">//路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; parameters;<span class="comment">//参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==== cache ====</span></span><br><span class="line"><span class="comment">//这些参数被transient修饰,不需要序列化,因为都可以由上面的参数构成</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> Map&lt;String, Number&gt; numbers;<span class="comment">//对数字的混存,缓存参数值为数字类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> Map&lt;String, URL&gt; urls;<span class="comment">//url的缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> String ip;<span class="comment">//缓存从host映射而来的ip地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> String full;<span class="comment">//缓存整个url的string,有用户名密码,有参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> String identity;<span class="comment">//url的唯一标识,没有参数,协议host和ip等可以唯一确定一个url地址,但是参数不是,参数可以不同</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> String parameter;<span class="comment">//参数的字符串</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> String string;<span class="comment">//url的字符串,没有用户名密码</span></span><br></pre></td></tr></table></figure><h2 id="构造字符串"><a href="#构造字符串" class="headerlink" title="构造字符串"></a>构造字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造url字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appendUser 是否需要加入用户名密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appendParameter 是否需要添加参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> useIP 是否用ip代替host</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> useService 是否用group/interfaceName:version代替路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameters 添加的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> url代表的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildString</span><span class="params">(<span class="keyword">boolean</span> appendUser, <span class="keyword">boolean</span> appendParameter, <span class="keyword">boolean</span> useIP, <span class="keyword">boolean</span> useService, String... parameters)</span> </span>&#123;</span><br><span class="line">    StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="keyword">null</span> &amp;&amp; protocol.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf.append(protocol);</span><br><span class="line">        buf.append(<span class="string">"://"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (appendUser &amp;&amp; username != <span class="keyword">null</span> &amp;&amp; username.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf.append(username);</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; password.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            buf.append(<span class="string">":"</span>);</span><br><span class="line">            buf.append(password);</span><br><span class="line">        &#125;</span><br><span class="line">        buf.append(<span class="string">"@"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String host;</span><br><span class="line">    <span class="keyword">if</span> (useIP) &#123;</span><br><span class="line">        host = getIp();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        host = getHost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (host != <span class="keyword">null</span> &amp;&amp; host.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf.append(host);</span><br><span class="line">        <span class="keyword">if</span> (port &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            buf.append(<span class="string">":"</span>);</span><br><span class="line">            buf.append(port);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String path;</span><br><span class="line">    <span class="keyword">if</span> (useService) &#123;</span><br><span class="line">        path = getServiceKey();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        path = getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path != <span class="keyword">null</span> &amp;&amp; path.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf.append(<span class="string">"/"</span>);</span><br><span class="line">        buf.append(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (appendParameter) &#123;</span><br><span class="line">        buildParameters(buf, <span class="keyword">true</span>, parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h1&gt;&lt;p&gt;Dubbo框架是以URL为总线的模式,即运行过程中所有的状态数据信息都可以通过URL来获取,比如当前系统采用什么序列化,采用什么通信
      
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>ExtensionLoader</title>
    <link href="http://yoursite.com/2018/04/16/ExtensionLoader/"/>
    <id>http://yoursite.com/2018/04/16/ExtensionLoader/</id>
    <published>2018-04-16T07:54:25.000Z</published>
    <updated>2018-04-18T09:43:34.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ExtensionLoader"><a href="#ExtensionLoader" class="headerlink" title="ExtensionLoader"></a>ExtensionLoader</h1><p>这是dubbo对扩展的支持类,通过该类以及相应的注解,dubbo实现了插件的开发模式.</p><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三个dubbo默认加载的扩展路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICES_DIRECTORY = <span class="string">"META-INF/services/"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_DIRECTORY = <span class="string">"META-INF/dubbo/"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_INTERNAL_DIRECTORY = DUBBO_DIRECTORY + <span class="string">"internal/"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载扩展类文件并根据类型缓存</span></span><br><span class="line"><span class="comment"> * spi注解标注的名字是默认实现</span></span><br><span class="line"><span class="comment"> * Adaptive注解的是适配实现</span></span><br><span class="line"><span class="comment"> * 有入参为该类型的就是包装类实现(譬如包装实现对filter,listener实现了构造)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> extensionClasses  存放扩展类的map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dir               路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, String dir)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//dubbo spi 要求文件名是class的全类名,type是本ExtensionLoader负责的类</span></span><br><span class="line">    String fileName = dir + type.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Enumeration&lt;java.net.URL&gt; urls;</span><br><span class="line">        <span class="comment">//加载ExtensionLoader的类加载器</span></span><br><span class="line">        ClassLoader classLoader = findClassLoader();</span><br><span class="line">        <span class="comment">//加载文件</span></span><br><span class="line">        <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            urls = classLoader.getResources(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            urls = ClassLoader.getSystemResources(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历文件</span></span><br><span class="line">        <span class="keyword">if</span> (urls != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                java.net.URL url = urls.nextElement();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//读取文件,编码格式utf-8</span></span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream(), <span class="string">"utf-8"</span>));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String line = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> ci = line.indexOf(<span class="string">'#'</span>);</span><br><span class="line">                            <span class="comment">//去除注释#后面内容</span></span><br><span class="line">                            <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) line = line.substring(<span class="number">0</span>, ci);</span><br><span class="line">                            line = line.trim();</span><br><span class="line">                            <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    String name = <span class="keyword">null</span>;</span><br><span class="line">                                    <span class="comment">//dubbo spi 的格式是名称=全类名</span></span><br><span class="line">                                    <span class="keyword">int</span> i = line.indexOf(<span class="string">'='</span>);</span><br><span class="line">                                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        name = line.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">                                        line = line.substring(i + <span class="number">1</span>).trim();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//加载=后面的扩展类</span></span><br><span class="line">                                        Class&lt;?&gt; clazz = Class.forName(line, <span class="keyword">true</span>, classLoader);</span><br><span class="line">                                        <span class="comment">//判断文件中定义的类是否是该ExtensionLoader负责的类的子类</span></span><br><span class="line">                                        <span class="keyword">if</span> (!type.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error when load extension class(interface: "</span> +</span><br><span class="line">                                                    type + <span class="string">", class line: "</span> + clazz.getName() + <span class="string">"), class "</span></span><br><span class="line">                                                    + clazz.getName() + <span class="string">"is not subtype of interface."</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="comment">//判断该加载类是否有Adaptive注解</span></span><br><span class="line">                                        <span class="keyword">if</span> (clazz.isAnnotationPresent(Adaptive.class)) &#123;</span><br><span class="line">                                            <span class="keyword">if</span> (cachedAdaptiveClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                <span class="comment">//缓存该类到cachedAdaptiveClass,如此可以避免像编译接口Compiler加载时出现循环依赖问题,因为该接口有Adaptive注解的实现类,无需编译</span></span><br><span class="line">                                                cachedAdaptiveClass = clazz;</span><br><span class="line">                                            <span class="comment">//有Adaptive注解的类只能定义一个,若是加载完成后没有Adaptive的类,那么dubbo会生成源码并自动编译生成一个</span></span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cachedAdaptiveClass.equals(clazz)) &#123;</span><br><span class="line">                                                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"More than 1 adaptive class found: "</span></span><br><span class="line">                                                        + cachedAdaptiveClass.getClass().getName()</span><br><span class="line">                                                        + <span class="string">", "</span> + clazz.getClass().getName());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                                <span class="comment">//该加载类是否有一个该ExtensionLoader负责的类为入参的构造方法</span></span><br><span class="line">                                                clazz.getConstructor(type);</span><br><span class="line">                                                <span class="comment">//如果有则表明该类是包装类,缓存到包装类set中</span></span><br><span class="line">                                                Set&lt;Class&lt;?&gt;&gt; wrappers = cachedWrapperClasses;</span><br><span class="line">                                                <span class="keyword">if</span> (wrappers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                    cachedWrapperClasses = <span class="keyword">new</span> ConcurrentHashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">                                                    wrappers = cachedWrapperClasses;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                wrappers.add(clazz);</span><br><span class="line">                                            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                                                <span class="comment">//是否有无参构造函数</span></span><br><span class="line">                                                clazz.getConstructor();</span><br><span class="line">                                                <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                                                    <span class="comment">//如果没有在文件中直接命名,那么就从Extension注解中或者没有Extension注解的话从类名中拿到名字</span></span><br><span class="line">                                                    name = findAnnotationName(clazz);</span><br><span class="line">                                                    <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                                                        <span class="keyword">if</span> (clazz.getSimpleName().length() &gt; type.getSimpleName().length()</span><br><span class="line">                                                                &amp;&amp; clazz.getSimpleName().endsWith(type.getSimpleName())) &#123;</span><br><span class="line">                                                            name = clazz.getSimpleName().substring(<span class="number">0</span>, clazz.getSimpleName().length() - type.getSimpleName().length()).toLowerCase();</span><br><span class="line">                                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No such extension name for the class "</span> + clazz.getName() + <span class="string">" in the config "</span> + url);</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                <span class="comment">//分割,以及两边的空格(正则),支持多命名</span></span><br><span class="line">                                                String[] names = NAME_SEPARATOR.split(name);</span><br><span class="line">                                                <span class="keyword">if</span> (names != <span class="keyword">null</span> &amp;&amp; names.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                                    <span class="comment">//判断是否在加载类上有Activate注解,缓存到cachedActivates</span></span><br><span class="line">                                                    Activate activate = clazz.getAnnotation(Activate.class);</span><br><span class="line">                                                    <span class="keyword">if</span> (activate != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                        cachedActivates.put(names[<span class="number">0</span>], activate);</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                    <span class="keyword">for</span> (String n : names) &#123;</span><br><span class="line">                                                        <span class="comment">//将第一个命名放入map,加载类为键,命名为值</span></span><br><span class="line">                                                        <span class="keyword">if</span> (!cachedNames.containsKey(clazz)) &#123;</span><br><span class="line">                                                            cachedNames.put(clazz, n);</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                        <span class="comment">//将所有命名为键,加载类为值放入入参的map</span></span><br><span class="line">                                                        Class&lt;?&gt; c = extensionClasses.get(n);</span><br><span class="line">                                                        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                            extensionClasses.put(n, clazz);</span><br><span class="line">                                                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c != clazz) &#123;</span><br><span class="line">                                                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Duplicate extension "</span> + type.getName() + <span class="string">" name "</span> + n + <span class="string">" on "</span> + c.getName() + <span class="string">" and "</span> + clazz.getName());</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                                    IllegalStateException e = <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to load extension class(interface: "</span> + type + <span class="string">", class line: "</span> + line + <span class="string">") in "</span> + url + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">                                    <span class="comment">//缓存加载类的异常</span></span><br><span class="line">                                    exceptions.put(line, e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="comment">// end of while read lines</span></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        reader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    logger.error(<span class="string">"Exception when load extension class(interface: "</span> +</span><br><span class="line">                            type + <span class="string">", class file: "</span> + url + <span class="string">") in "</span> + url, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// end of while urls</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        logger.error(<span class="string">"Exception when load extension class(interface: "</span> +</span><br><span class="line">                type + <span class="string">", description file: "</span> + fileName + <span class="string">")."</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有Adaptive注解的类,dubbo自动生成源码,编译成类</span></span><br><span class="line"><span class="comment"> * 只对所有加载的实现都没有Adaptive注解,并且接口方法上有Adaptive注解的接口构造源码</span></span><br><span class="line"><span class="comment"> * 构造的方法实现仅仅是在url中找寻实现</span></span><br><span class="line"><span class="comment"> * 按照Adaptive注解值的顺序在url上找对应的实现名字,没有找到就是spi注解的默认实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createAdaptiveExtensionClassCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生成类全部代码的StringBuilder</span></span><br><span class="line">    StringBuilder codeBuidler = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Method[] methods = type.getMethods();</span><br><span class="line">    <span class="keyword">boolean</span> hasAdaptiveAnnotation = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//扩展类的所有方法上是否有Adaptive注解,只有Adaptive注解的方法才会被生成源码</span></span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m.isAnnotationPresent(Adaptive.class)) &#123;</span><br><span class="line">            hasAdaptiveAnnotation = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// no need to generate adaptive class since there's no adaptive method found.</span></span><br><span class="line">    <span class="keyword">if</span> (!hasAdaptiveAnnotation)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No adaptive method on extension "</span> + type.getName() + <span class="string">", refuse to create the adaptive class!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//包</span></span><br><span class="line">    codeBuidler.append(<span class="string">"package "</span> + type.getPackage().getName() + <span class="string">";"</span>);</span><br><span class="line">    <span class="comment">//import ExtensionLoader</span></span><br><span class="line">    codeBuidler.append(<span class="string">"\nimport "</span> + ExtensionLoader.class.getName() + <span class="string">";"</span>);</span><br><span class="line">    <span class="comment">//类签名,类名是扩展类加上$Adaptive</span></span><br><span class="line">    codeBuidler.append(<span class="string">"\npublic class "</span> + type.getSimpleName() + <span class="string">"$Adaptive"</span> + <span class="string">" implements "</span> + type.getCanonicalName() + <span class="string">" &#123;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="comment">//方法返回类型</span></span><br><span class="line">        Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">        <span class="comment">//方法参数类型数组</span></span><br><span class="line">        Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">        <span class="comment">//方法异常类型数组</span></span><br><span class="line">        Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">        Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);</span><br><span class="line">        StringBuilder code = <span class="keyword">new</span> StringBuilder(<span class="number">512</span>);</span><br><span class="line">        <span class="comment">//没有标注Adaptive注解的方法直接抛不支持操作的异常</span></span><br><span class="line">        <span class="keyword">if</span> (adaptiveAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            code.append(<span class="string">"throw new UnsupportedOperationException(\"method "</span>)</span><br><span class="line">                    .append(method.toString()).append(<span class="string">" of interface "</span>)</span><br><span class="line">                    .append(type.getName()).append(<span class="string">" is not adaptive method!\");"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//找到类型是URL的参数位置</span></span><br><span class="line">            <span class="keyword">int</span> urlTypeIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pts[i].equals(URL.class)) &#123;</span><br><span class="line">                    urlTypeIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// found parameter in URL type</span></span><br><span class="line">            <span class="keyword">if</span> (urlTypeIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//如果有URL则先判断一下是否为null</span></span><br><span class="line">                String s = String.format(<span class="string">"\nif (arg%d == null) throw new IllegalArgumentException(\"url == null\");"</span>,</span><br><span class="line">                        urlTypeIndex);</span><br><span class="line">                code.append(s);</span><br><span class="line"></span><br><span class="line">                s = String.format(<span class="string">"\n%s url = arg%d;"</span>, URL.class.getName(), urlTypeIndex);</span><br><span class="line">                code.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// did not find parameter in URL type</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果没有URL类型的参数,那就去找参数中是否有返回类型为URL的方法</span></span><br><span class="line">                String attribMethod = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// find URL getter method</span></span><br><span class="line">                LBL_PTS:</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                    Method[] ms = pts[i].getMethods();</span><br><span class="line">                    <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                        String name = m.getName();</span><br><span class="line">                        <span class="keyword">if</span> ((name.startsWith(<span class="string">"get"</span>) || name.length() &gt; <span class="number">3</span>)</span><br><span class="line">                                &amp;&amp; Modifier.isPublic(m.getModifiers())</span><br><span class="line">                                &amp;&amp; !Modifier.isStatic(m.getModifiers())</span><br><span class="line">                                &amp;&amp; m.getParameterTypes().length == <span class="number">0</span></span><br><span class="line">                                &amp;&amp; m.getReturnType() == URL.class) &#123;</span><br><span class="line">                            urlTypeIndex = i;</span><br><span class="line">                            attribMethod = name;</span><br><span class="line">                            <span class="keyword">break</span> LBL_PTS;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (attribMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"fail to create adaptive class for interface "</span> + type.getName()</span><br><span class="line">                            + <span class="string">": not found url parameter or url attribute in parameters of method "</span> + method.getName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//校验参数是否为空</span></span><br><span class="line">                String s = String.format(<span class="string">"\nif (arg%d == null) throw new IllegalArgumentException(\"%s argument == null\");"</span>,</span><br><span class="line">                        urlTypeIndex, pts[urlTypeIndex].getName());</span><br><span class="line">                code.append(s);</span><br><span class="line">                <span class="comment">//校验参数调用返回值为URL的方法的返回值是否为空</span></span><br><span class="line">                s = String.format(<span class="string">"\nif (arg%d.%s() == null) throw new IllegalArgumentException(\"%s argument %s() == null\");"</span>,</span><br><span class="line">                        urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod);</span><br><span class="line">                code.append(s);</span><br><span class="line">                <span class="comment">//得到URL</span></span><br><span class="line">                s = String.format(<span class="string">"%s url = arg%d.%s();"</span>, URL.class.getName(), urlTypeIndex, attribMethod);</span><br><span class="line">                code.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//得到方法上Adaptive注解的值</span></span><br><span class="line">            String[] value = adaptiveAnnotation.value();</span><br><span class="line">            <span class="comment">//如果没有值,那么就用扩展类的简单类名作转化(驼峰命名法单词间加.并且首字母大写转为小写)</span></span><br><span class="line">            <span class="keyword">if</span> (value.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] charArray = type.getSimpleName().toCharArray();</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Character.isUpperCase(charArray[i])) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                            sb.append(<span class="string">"."</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        sb.append(Character.toLowerCase(charArray[i]));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sb.append(charArray[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="keyword">new</span> String[]&#123;sb.toString()&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> hasInvocation = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                <span class="comment">//是否有Invocation类型的参数</span></span><br><span class="line">                <span class="keyword">if</span> (pts[i].getName().equals(<span class="string">"com.alibaba.dubbo.rpc.Invocation"</span>)) &#123;</span><br><span class="line">                    <span class="comment">//对Invocation类型的参数进行非空判断</span></span><br><span class="line">                    String s = String.format(<span class="string">"\nif (arg%d == null) throw new IllegalArgumentException(\"invocation == null\");"</span>, i);</span><br><span class="line">                    code.append(s);</span><br><span class="line">                    <span class="comment">//调用Invocation的getMethodName方法</span></span><br><span class="line">                    s = String.format(<span class="string">"\nString methodName = arg%d.getMethodName();"</span>, i);</span><br><span class="line">                    code.append(s);</span><br><span class="line">                    hasInvocation = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//默认的扩展,定义在spi注解中</span></span><br><span class="line">            String defaultExtName = cachedDefaultName;</span><br><span class="line">            String getNameCode = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//从后遍历adaptive注解的值,第一个注解的值对应的url的值会覆盖第二个注解的值对应的url的值,以此类推,如果没有就是spi中的默认值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = value.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="comment">//这里比较难描述,最后的值直接从url中拿(默认值为spi中的值),前面的值则是从后一个得到的值作为默认值</span></span><br><span class="line">                <span class="comment">//最终的目的是拿到该扩展的一个定义的名字</span></span><br><span class="line">                <span class="keyword">if</span> (i == value.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != defaultExtName) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">"protocol"</span>.equals(value[i]))</span><br><span class="line">                            <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                                getNameCode = String.format(<span class="string">"url.getMethodParameter(methodName, \"%s\", \"%s\")"</span>, value[i], defaultExtName);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                getNameCode = String.format(<span class="string">"url.getParameter(\"%s\", \"%s\")"</span>, value[i], defaultExtName);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">"( url.getProtocol() == null ? \"%s\" : url.getProtocol() )"</span>, defaultExtName);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">"protocol"</span>.equals(value[i]))</span><br><span class="line">                            <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                                getNameCode = String.format(<span class="string">"url.getMethodParameter(methodName, \"%s\", \"%s\")"</span>, value[i], defaultExtName);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                getNameCode = String.format(<span class="string">"url.getParameter(\"%s\")"</span>, value[i]);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            getNameCode = <span class="string">"url.getProtocol()"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">"protocol"</span>.equals(value[i]))</span><br><span class="line">                        <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                            getNameCode = String.format(<span class="string">"url.getMethodParameter(methodName, \"%s\", \"%s\")"</span>, value[i], defaultExtName);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">"url.getParameter(\"%s\", %s)"</span>, value[i], getNameCode);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        getNameCode = String.format(<span class="string">"url.getProtocol() == null ? (%s) : url.getProtocol()"</span>, getNameCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//拿到扩展的名字</span></span><br><span class="line">            code.append(<span class="string">"\nString extName = "</span>).append(getNameCode).append(<span class="string">";"</span>);</span><br><span class="line">            <span class="comment">// check extName == null?</span></span><br><span class="line">            String s = String.format(<span class="string">"\nif(extName == null) "</span> +</span><br><span class="line">                            <span class="string">"throw new IllegalStateException(\"Fail to get extension(%s) name from url(\" + url.toString() + \") use keys(%s)\");"</span>,</span><br><span class="line">                    type.getName(), Arrays.toString(value));</span><br><span class="line">            code.append(s);</span><br><span class="line">            <span class="comment">//用该名字去拿最终的扩展类</span></span><br><span class="line">            s = String.format(<span class="string">"\n%s extension = (%&lt;s)%s.getExtensionLoader(%s.class).getExtension(extName);"</span>,</span><br><span class="line">                    type.getName(), ExtensionLoader.class.getSimpleName(), type.getName());</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// return statement</span></span><br><span class="line">            <span class="keyword">if</span> (!rt.equals(<span class="keyword">void</span>.class)) &#123;</span><br><span class="line">                code.append(<span class="string">"\nreturn "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//用该扩展调用相同的方法</span></span><br><span class="line">            s = String.format(<span class="string">"extension.%s("</span>, method.getName());</span><br><span class="line">            code.append(s);</span><br><span class="line">            <span class="comment">//传入相同的参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                    code.append(<span class="string">", "</span>);</span><br><span class="line">                code.append(<span class="string">"arg"</span>).append(i);</span><br><span class="line">            &#125;</span><br><span class="line">            code.append(<span class="string">");"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法签名</span></span><br><span class="line">        codeBuidler.append(<span class="string">"\npublic "</span> + rt.getCanonicalName() + <span class="string">" "</span> + method.getName() + <span class="string">"("</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                codeBuidler.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//参数是以arg0,arg1...标识的</span></span><br><span class="line">            codeBuidler.append(pts[i].getCanonicalName());</span><br><span class="line">            codeBuidler.append(<span class="string">" "</span>);</span><br><span class="line">            codeBuidler.append(<span class="string">"arg"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        codeBuidler.append(<span class="string">")"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ets.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            codeBuidler.append(<span class="string">" throws "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ets.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    codeBuidler.append(<span class="string">", "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                codeBuidler.append(ets[i].getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        codeBuidler.append(<span class="string">" &#123;"</span>);</span><br><span class="line">        codeBuidler.append(code.toString());</span><br><span class="line">        codeBuidler.append(<span class="string">"\n&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    codeBuidler.append(<span class="string">"\n&#125;"</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(codeBuidler.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> codeBuidler.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入扩展示例的有setXXX方法的域</span></span><br><span class="line"><span class="comment"> * instance是扩展类的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">injectExtension</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (objectFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class="line">                <span class="comment">//遍历方法,找到set开头的,参数只有一个的,public方法</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().startsWith(<span class="string">"set"</span>)</span><br><span class="line">                        &amp;&amp; method.getParameterTypes().length == <span class="number">1</span></span><br><span class="line">                        &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                    Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//得到set后面的属性名字(首字母小写)</span></span><br><span class="line">                        String property = method.getName().length() &gt; <span class="number">3</span> ? method.getName().substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + method.getName().substring(<span class="number">4</span>) : <span class="string">""</span>;</span><br><span class="line">                        <span class="comment">//从bean工厂中拿到该类型该名字的属性,例如spring就是从ApplicationContext中拿</span></span><br><span class="line">                        Object object = objectFactory.getExtension(pt, property);</span><br><span class="line">                        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">//调用该set方法</span></span><br><span class="line">                            method.invoke(instance, object);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        logger.error(<span class="string">"fail to inject via method "</span> + method.getName()</span><br><span class="line">                                + <span class="string">" of interface "</span> + type.getName() + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建扩展类,该方法被ExtensionLoader中得到扩展实现的方法都调用了,因此保证了包装类一定是包装了的</span></span><br><span class="line"><span class="comment"> * name 要创建的扩展类的名字(扩展文件的键值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createExtension</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拿到键值对应的class</span></span><br><span class="line">    Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> findException(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//从缓存中拿对象</span></span><br><span class="line">        T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//没有就无参构造一个放入缓存</span></span><br><span class="line">            EXTENSION_INSTANCES.putIfAbsent(clazz, (T) clazz.newInstance());</span><br><span class="line">            instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注入set的属性</span></span><br><span class="line">        injectExtension(instance);</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class="line">        <span class="comment">//遍历对象的包装类,调用参数为该类型的构造函数生成包装类,并设置set属性</span></span><br><span class="line">        <span class="keyword">if</span> (wrapperClasses != <span class="keyword">null</span> &amp;&amp; !wrapperClasses.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class="line">                instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回的对象是所有包装类包装好后的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Extension instance(name: "</span> + name + <span class="string">", class: "</span> +</span><br><span class="line">                type + <span class="string">")  could not be instantiated: "</span> + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ExtensionLoader&quot;&gt;&lt;a href=&quot;#ExtensionLoader&quot; class=&quot;headerlink&quot; title=&quot;ExtensionLoader&quot;&gt;&lt;/a&gt;ExtensionLoader&lt;/h1&gt;&lt;p&gt;这是dubbo对扩展的支持类,通过
      
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>java多线程介绍</title>
    <link href="http://yoursite.com/2018/04/15/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/04/15/java多线程介绍/</id>
    <published>2018-04-15T05:10:06.000Z</published>
    <updated>2018-04-16T02:41:35.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>Process是程序运行的实例,向操作系统申请资源(内存空间和文件句柄)基本单位.</p><p><code>ps -ef</code> - 进程信息</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>Thread是进程中可独立执行的最小单位.一个进程可以包含多个线程,同一个进程中的所有线程共享该进程中的资源.线程所要完成的计算就被称为任务,特定的线程总是在执行着特定的任务.</p><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>java平台中创建一个线程就是创建一个Thread或其子类,线程的任务逻辑在thread的run方法中,由虚拟机直接调用.但是,首先要启动线程,对应thread的start方法,具体何时运行是由线程调度器(Scheduler)决定的.</p><p>创建thread的两种方式:1.继承thread并重写run方法 2.实现Runnable接口在run方法中实现任务逻辑并传给thread的构造函数.</p><p>线程的run方法结束(正常结束或者异常退出),内存对象也会被虚拟机回收.并且线程的start方法只能被调用一次,多次调用会返回IllegalThreadStateException.</p><p>创建一个线程对象与其他对象不同的是,java虚拟机会为每个线程分配调用栈(Call Stack)所需的内存空间.调用栈用于跟踪java代码间的调用关系以及java对本地代码(Native Code)的调用,另外java平台的每个线程可能还有一个内核线程与之对应.</p><p><code>Thread.currentThread()</code> - 返回当前线程</p><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>Thread是Runnable接口的一个实现类,重写的run方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中,target是一个Runnable对象,第二个创建线程的方法会把构造函数传入的Runnable对象用target保存起来.</p><p>由于java是单继承的,并且组合也比继承更灵活,因此一般而言,使用第二种创建线程的方法.</p><p><code>Runtime.getRuntime.availableProcessors()</code> - 获取处理器个数</p><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><p>线程的编号(ID),名称(name),线程的类别(Daemon)和优先级(Priority).</p><ul><li>ID</li></ul><p>long,用于标识不同的线程,该属性在运行结束后可能被后续创建的线程使用</p><ul><li>name</li></ul><p>String,面向用户的一个属性,不保证唯一.</p><ul><li>Deamon</li></ul><p>boolean,true表示为守护线程,该属性的默认值与父线程相同,且必须在start方法之前设置.用户线程会阻止虚拟机的正常停止,即有用户线程在运行时,虚拟机不会正常停止,但是守护线程不会影响java虚拟机的正常停止,用于执行一些重要性不是很高的任务.</p><p>java虚拟机的正常停止指不是通过System.exit也不是通过强制终止进程(kill).</p><ul><li>Priority</li></ul><p>int,java定义了1-10的10个优先级,默认值为5(表示普通优先级).对于具体的一个线程而言,其优先级的默认值和父线程相同.该值设置不当会产生线程饥饿(Thread Starvation).</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><code>static Thread currentThread()</code> - 返回当前线程</p><p><code>void run()</code> - 线程任务逻辑代码</p><p><code>void start()</code> - 启动相应线程,不保证已经被启动和一定会启动</p><p><code>void join()</code> - 等待相应线程运行结束,若A线程调用<strong><em>B</em></strong>线程的join方法,那么线程A会暂停直到B线程运行结束</p><p><code>static void yield()</code> - 使当前线程主动放弃其对处理器的占用,该方法被调用时当前线程可能仍然继续运行</p><p><code>static void sleep(long millis)</code> - 休眠指定的时间</p><h2 id="线程的层次关系"><a href="#线程的层次关系" class="headerlink" title="线程的层次关系"></a>线程的层次关系</h2><p>父子关系:创建线程的当前线程是被创建的线程的父线程.</p><h2 id="java-lang-Thread-State-enum"><a href="#java-lang-Thread-State-enum" class="headerlink" title="java.lang.Thread.State(enum)"></a>java.lang.Thread.State(enum)</h2><p>可以通过Thread.getState()获取.</p><ul><li>new</li></ul><p>一个已经创建但是未启动的线程处于该状态,一个线程只可能有一次处于该状态</p><ul><li>runnable</li></ul><p>包括两个子状态:ready和running.ready表示可以被线程调度器调度而进入running状态,也被称为活跃线程.running表示正在运行,调用yield方法可能会转换为ready.</p><ul><li>blocked</li></ul><p>一个线程发起一个阻塞式io或者申请一个已经被其他线程持有的独占资源(锁),线程处于该状态,此时线程不会占用处理器资源,当io操作或者或者锁时,可以转化为runnable</p><ul><li>waiting</li></ul><p>使线程变为wating状态的方法:Object.wait(),Thread.join(),LockSupport.park(Object)</p><p>从waiting转化为runnable的方法:Object.notify()和notifyAll(),LockSupport.unpark(Object)</p><ul><li>timed_waiting</li></ul><p>和waiting的区别就是指定时间结束后,该线程会自动转化为runnable</p><ul><li>terminated</li></ul><p>结束运行的线程处于该状态,每个线程也只会有一次处于该状态</p><h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>java提供的jvm监视工具</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>提高系统吞吐率</li><li>提高响应性</li><li>充分利用多核处理器资源</li><li>最小化对系统资源的使用</li><li>简化程序的机构</li></ol><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ol><li>线程安全问题</li><li>线程活跃性问题</li><li>上下文切换</li><li>可靠性</li></ol><p><img src="/2018/04/15/java多线程介绍/介绍.png" alt="介绍"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念介绍&quot;&gt;&lt;a href=&quot;#概念介绍&quot; class=&quot;headerlink&quot; title=&quot;概念介绍&quot;&gt;&lt;/a&gt;概念介绍&lt;/h1&gt;&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h
      
    
    </summary>
    
    
      <category term="java多线程" scheme="http://yoursite.com/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>reflection</title>
    <link href="http://yoursite.com/2018/04/12/reflection/"/>
    <id>http://yoursite.com/2018/04/12/reflection/</id>
    <published>2018-04-12T12:48:52.000Z</published>
    <updated>2018-04-13T09:32:06.021Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在运行中分析类的能力。</li><li>在运行中查看对象，例如，编写一个toString方法供所有类使用。</li><li>实现数组的操作代码。</li><li>利用Method对象，这个对象很像C++中的函数指针。</li></ul><p>-<br>Class.forName</p><p>Class.getName</p><p>int.class</p><p>Class.newInstance/Constructor.newInstance</p><p>-<br>AccessibleObject<br>Filed Method Constructor</p><p>getModifiers方法返回整形数值，用不同的位开关描述public和static这样的修饰符使用状况，可以使用Modifier类的静态方法分析返回的整形数值。另外，还可以利用Modifier.toString方法将修饰法打印出来。</p><p>Class类中的getFields、getMethods和getConstructors方法将分别返回类提供的public域、方法和构造器数组，其中包括超类的公有成员。Class类的getDeclareFields、getDeclareMethods和<br>getDeclaredConstructors方法将分别返回类中声明的全部域、方法和构造器，其中包括私有和受保护成员，但不包括超类的成员。</p><p>setAccessible方法可以覆盖访问控制(仅仅是跳过安全检查)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在运行中分析类的能力。&lt;/li&gt;
&lt;li&gt;在运行中查看对象，例如，编写一个toString方法供所有类使用。&lt;/li&gt;
&lt;li&gt;实现数组的操作代码。&lt;/li&gt;
&lt;li&gt;利用Method对象，这个对象很像C++中的函数指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-&lt;br&gt;
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>equals</title>
    <link href="http://yoursite.com/2018/04/12/equals/"/>
    <id>http://yoursite.com/2018/04/12/equals/</id>
    <published>2018-04-12T12:47:38.000Z</published>
    <updated>2018-04-12T12:48:13.726Z</updated>
    
    <content type="html"><![CDATA[<ol><li>自反性：对于任何非空引用x，x.equals(x) 应该返回true。</li><li>对称性：对于任何引用x和y，当且仅当y.equals(x)返回true，x.equals(y)也应该返回true。</li><li>传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，x.equals(z) 也应该返回true。</li><li>一致性：如果x和y引用的对象没有发生变化，反复调用x.equals(y) 应该返回同样的结果。</li><li>对于任意非空引用x，x.equals(null) 应该返回false。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj.getClass() != <span class="keyword">this</span>.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//类型转化并判断属性是否相等</span></span><br><span class="line">    Test t = (Test) obj;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意是class对象是否相等，如果是使用<code>instanceof</code>关键字的话，子类对象和父类对象不满足对称性，详细：</p><ul><li>如果子类能够拥有自己的相等概念，则对称性需求将强制采用getClass进行检测。</li><li>如果由超类决定相等的概念，那么就可以使用instanceof进行检测，这样可以在不同子类的对象之间进行相等的比较，并且最好定义为final方法。</li></ul><p>如果在子类中重新定义equals，就要在其中包含调用super.equals(other)。</p><p>Equals与hashCode的定义必须一致：如果x.equals(y)返回true，那么x.hashCode( )就必须与y.hashCode( )具有相同的值。</p><p>如果存在数组类型的域，那么可以使用静态的Arrays.hashCode方法计算一个散列码，这个散列码由数组元素的散列码组成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;自反性：对于任何非空引用x，x.equals(x) 应该返回true。&lt;/li&gt;
&lt;li&gt;对称性：对于任何引用x和y，当且仅当y.equals(x)返回true，x.equals(y)也应该返回true。&lt;/li&gt;
&lt;li&gt;传递性：对于任何引用x、y和z，如果x
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>enum</title>
    <link href="http://yoursite.com/2018/04/12/enum/"/>
    <id>http://yoursite.com/2018/04/12/enum/</id>
    <published>2018-04-12T12:47:09.000Z</published>
    <updated>2018-04-12T12:47:27.309Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>枚举可以通过==判断相等</p></li><li><p>枚举的toString方法返回枚举常量名，Enum.valueOf是toString的逆方法</p></li><li><p>每个枚举类型都有一个静态的values方法，返回包含全部枚举值的数组</p></li><li><p>ordinal方法返回枚举常量的位置，从0开始计数</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;枚举可以通过==判断相等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;枚举的toString方法返回枚举常量名，Enum.valueOf是toString的逆方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个枚举类型都有一个静态的values方法，返回包含全部枚举值的数组
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>collection</title>
    <link href="http://yoursite.com/2018/04/12/collection/"/>
    <id>http://yoursite.com/2018/04/12/collection/</id>
    <published>2018-04-12T12:46:41.000Z</published>
    <updated>2018-04-16T02:42:41.115Z</updated>
    
    <content type="html"><![CDATA[<p>queue队列实现：循环数组和链表</p><p>remove方法删除刚刚越过的那个元素，不能连续调用两次remove来删除两个元素，正确方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = list.iterator();</span><br><span class="line">it.next();</span><br><span class="line">it.remove();</span><br><span class="line">it.next();</span><br><span class="line">it.remove();</span><br></pre></td></tr></table></figure><p>WeakHashMap只有映射表本身持有某个键值的时候，会将键值存入队列，WeakHashMap周期性检查队列删除对应条目。</p><p>LinkedHashSet和LinkedHashMap记住了存放顺序，在值上添加了双向链表。</p><p><code>Arrays.asList</code></p><p><code>Collections.singleton</code></p><p>不可修改的视图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collections.unmodifiableCollection</span><br><span class="line">Collections.unmodifiableList</span><br><span class="line">Collections.unmodifiableSet</span><br><span class="line">Collections.unmodifiableSortedSet</span><br><span class="line">Collections.unmodifiableMap</span><br><span class="line">Collections.unmodifiableSortedMap</span><br></pre></td></tr></table></figure><p>Collections类的静态synchronizedMap方法可以将任何一个映射表转换成具有同步访问方法的Map;list同理</p><p>二分查找只有在支持随机访问的数据结构上才有意义，如果是一个链表，将会每一次都遍历一半元素来找到中间位置，二分查找就失去了优势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;queue队列实现：循环数组和链表&lt;/p&gt;
&lt;p&gt;remove方法删除刚刚越过的那个元素，不能连续调用两次remove来删除两个元素，正确方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>知识点</title>
    <link href="http://yoursite.com/2018/04/12/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/04/12/知识点/</id>
    <published>2018-04-12T12:45:58.000Z</published>
    <updated>2018-04-13T09:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编辑运行命令"><a href="#编辑运行命令" class="headerlink" title="编辑运行命令"></a>编辑运行命令</h2><p>javac Test.java</p><p>java Test</p><h2 id="基础类型-primitive-type"><a href="#基础类型-primitive-type" class="headerlink" title="基础类型(primitive type)"></a>基础类型(primitive type)</h2><p>byte short int long 对应字节数：1，2，4，8</p><p>float double 对应字节数：4，8</p><p>char </p><p>boolean</p><p>Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY和Double.NaN分别表示无穷大、无穷小和非数(0/0)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//is never true</span></span><br><span class="line"><span class="keyword">if</span> (x == Double.NaN)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确判断方式</span></span><br><span class="line"><span class="keyword">if</span> (Double.isNaN(x))</span><br></pre></td></tr></table></figure><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Character.isJavaIdentifierStart();<span class="comment">//判断该字符是否可以作为变量的开头</span></span><br><span class="line">Character.isJavaIdentifierPart();<span class="comment">//判断该字符是否可以作为变量的一部分</span></span><br></pre></td></tr></table></figure><h2 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h2><p>整型计算 /求商 %求余</p><p>数值计算的中间过程允许是扩展的精度，即超出字段的范围，最后的结尾进行截断成为对应字节数的长度</p><p><strong>strictfp</strong>关键字标记类或者方法，所有的运算都将使用严格的浮点计算</p><p>位计算符：&amp;（”与”）、|（”或”）、^（”异或”）、~（”非”）</p><p>>&gt;&gt;运算符将用0填充高位；&gt;&gt;运算符用符号位填充高位；没有&lt;&lt;&lt;运算符</p><p>对移位运算符右侧的参数需要进行模32的运算（除非左边的操作数是long类型，<br>在这种情况下需对右侧操作数模64）。例如，1 &lt;&lt; 35与1 &lt;&lt; 3是相同的。</p><p>如果得到一个完全可预测的结果比运行速度更重要的话，那么就应该使用StrictMath类。</p><p><img src="/2018/04/12/知识点/精度.png" alt="数值类型之间的合法转换.png"></p><p>6个实心箭头，表示无信息丢失的转换；3个虚箭头，表示可能有精度损失<br>的转换</p><ul><li>如果两个操作数中有一个是double类型的，另一个操作数就会转换为double类型。</li><li>否则，如果其中一个操作数是float类型，另一个操作数将会转换为float类型。</li><li>否则，如果其中一个操作数是long类型，另一个操作数将会转换为long类型。</li><li>否则，两个操作数都将被转换为int类型。</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>length方法将返回采用UTF-16编码表示的给定字符串所需要的代码单元数量;要想得到实际的长度，即代码点数量，可以调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = s.codePointCount(<span class="number">0</span>, s.length());</span><br></pre></td></tr></table></figure><p>调用s.charAt(n) 将返回位置n的代码单元，n介于0～s.length()-1之间;要想得到第i个代码点，应该使用下列语句:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index = s.offsetByCodePoints(<span class="number">0</span>, i);</span><br><span class="line"><span class="keyword">int</span> cp = s.codePointAt(index);</span><br></pre></td></tr></table></figure><p>如果想要遍历一个字符串，并且依次查看每一个代码点，可以使用下列语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cp = s.codePointAt(index);</span><br><span class="line"><span class="keyword">if</span> (Character.isSupplementaryCodePoint(cp)) i+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> i++;</span><br></pre></td></tr></table></figure><p>StringBuilder线程不安全；StringBuffer线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">Arrays.toString</span><br><span class="line">Arrays.deepToString</span><br></pre></td></tr></table></figure><h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in)</span><br></pre></td></tr></table></figure><p>因为输入是可见的，所以Scanner类不适用于从控制台读取密码。Java SE 6特别引<br>入了Console类实现这个目的。要想读取一个密码，可以采用下列代码(为了安全起见，返回的密码存放在一维字符数组中，而不是字符串中。在对密码进行处理之后，应该马上用一个填充值覆盖数组元素)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意只能控制台运行，idea无法得到console</span></span><br><span class="line">Console c = System.console();</span><br><span class="line">String username = c.readLine(<span class="string">"User name: "</span>);</span><br><span class="line"><span class="keyword">char</span>[] password = c.readPassword(<span class="string">"password: "</span>);</span><br></pre></td></tr></table></figure><h2 id="方法传参"><a href="#方法传参" class="headerlink" title="方法传参"></a>方法传参</h2><p>java都是值引用</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能实现让对象参数引用一个新的对象。</li></ul><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>System.runFinalizersOnExit(true) 的方法能够确保finalizer方法在Java关闭<br>前被调用。不过，这个方法并不安全，也不鼓励大家使用。有一种代替的方法是使用方法<br>Runtime.addShutdownHook添加“关闭钩”（shutdown hook）</p><h2 id="数组克隆"><a href="#数组克隆" class="headerlink" title="数组克隆"></a>数组克隆</h2><p>所有的数组类型均包含一个clone方法，这个方法被设为public，而不是protected。可以利用这个方法创建一个包含所有数据元素拷贝的一个新数组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编辑运行命令&quot;&gt;&lt;a href=&quot;#编辑运行命令&quot; class=&quot;headerlink&quot; title=&quot;编辑运行命令&quot;&gt;&lt;/a&gt;编辑运行命令&lt;/h2&gt;&lt;p&gt;javac Test.java&lt;/p&gt;
&lt;p&gt;java Test&lt;/p&gt;
&lt;h2 id=&quot;基础类型-prim
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="http://yoursite.com/2018/04/12/%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/04/12/泛型/</id>
    <published>2018-04-12T12:44:35.000Z</published>
    <updated>2018-04-12T12:45:22.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair p = <span class="keyword">new</span> Pair();</span><br><span class="line">        Pair&lt;String&gt; p2 = <span class="keyword">new</span> Pair&lt;&gt;(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">        System.out.println(p2.getFirst());</span><br><span class="line">        System.out.println(p2.getSecond());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T[] a)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Cloneable &amp; Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T[] a)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>限定类型用“&amp;”分隔，而逗号用来分隔类型变量。在Java的继承中，可以根据需要拥有多个接口超类型，但限定中至多有一个类。如果用一个类作为限定，它必须是限定列表中的第一个。</p><p>无论何时定义一个泛型类型，都自动提供了一个相应的原始类型（raw type）。原始类型的名字就是删去类型参数后的泛型类型名。擦除（erased）类型变量，并替换为限定类型（无限定的变量用Object)。</p><ul><li>虚拟机中没有泛型，只有普通的类和方法。</li><li>所有的类型参数都用它们的限定类型替换。</li><li>桥方法被合成来保持多态。</li><li>为保持类型安全性，必要时插入强制类型转换。</li></ul><p>不能抛出也不能捕获泛型类实例,泛型类扩展Throwable都不合法</p><p>参数化类型的数组不合法</p><p>不能实例化类型变量,不能使用像new T(…)</p><p>考虑一个类和一个子类，如Employee和Manager。Pair<manager>是Pair<employee>的一个子类吗？答案是“不是”。</employee></manager></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此方法不能接受Pair&lt;Manager&gt;参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Pair&lt;Emplyee&gt; p)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//可以接受泛型参数继承自Employee的所有参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Pair&lt;? extends Employee&gt; p)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? <span class="function">extends Employee <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(? extends Employee)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? <span class="function"><span class="keyword">super</span> Employee <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(? <span class="keyword">super</span> Employee)</span></span></span><br></pre></td></tr></table></figure><p>注意extends和super的区别:extends的get方法可以调用，但是set方法不行，get方法返回值即是父类引用指向子类对象的情况，set入参不能确定；super</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;泛型类&quot;&gt;&lt;a href=&quot;#泛型类&quot; class=&quot;headerlink&quot; title=&quot;泛型类&quot;&gt;&lt;/a&gt;泛型类&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://yoursite.com/2018/04/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/12/多线程/</id>
    <published>2018-04-12T12:27:10.000Z</published>
    <updated>2018-04-12T13:00:36.517Z</updated>
    
    <content type="html"><![CDATA[<p>interrupt方法可以用来请求终止线程，当对一个线程调用interrupt方法时，线程的中断状态将被置位，这是每一个线程都具有的boolean标志，每个线程都应该不时检查这个标志，以判断线程是否被中断。<br>isInterrupted方法可以用来判断中断状态是否被置位。</p><p>但是，如果线程被阻塞，就无法检测中断状态。这是产生InterruptedException异常的地方。当<br>在一个被阻塞的线程（调用sleep或wait）上调用interrupt方法时，阻塞调用将会被Interrupted<br>Exception异常中断。</p><p>有两个非常类似的方法，interrupted和isInterrupted。Interrupted方法是一个静态方<br>法，它检测当前的线程是否被中断。而且，调用interrupted方法会清除该线程的中断状态。<br>另一方面，isInterrupted方法是一个实例方法，可用来检验是否有线程被中断。调用这个<br>方法不会改变中断状态。</p><blockquote><p>线程可以有如下6种状态：</p></blockquote><ul><li>New（新生)</li><li>Runnable（可运行）</li><li>Blocked（被阻塞）</li><li>Waiting（等待）</li><li>Timed waiting（计时等待）</li><li>Terminated（被终止）</li></ul><blockquote><p>要确定一个线程的当前状态，可调用getState方法。</p></blockquote><ul><li>新生线程<br>当一个线程处于新生状态时，线程还没有开始运行，还有一些薄记工作要做。</li><li>可运行线程<br>一旦调用start方法，线程处于runnable状态，可能运行也可能没有运行。抢占式调度系统给每一个可运行线程一个时间片来执行任务，当时间片用完，操作系统考虑线程的优先级来给另一个线程运行几乎。<br>像手机这样的小型设备可能使用协作式调度，一个线程只有在调用yield方法或者被阻塞或被等待时，线程才失去控制权。</li><li>当一个线程试图获取一个内部的对象锁（而不是java.util.concurrent库中的锁），而该所被其他线程持有时，则进入阻塞状态。</li><li>当线程等待另一个线程通知调度器一个条件时，进入等待状态。Object.wait或者Thread.join，或者是等待java.util.concurrent库中的Lock或Condition。</li><li>Thread.sleep,Object.wait,Thread.join,Lock.tryLock以及Condition.await的记时板，调用这些方法导致线程进入记时等待，这个状态将一直保持到超时期满或者接受到适当的通知。</li><li>run方法正常退出而自然死亡；因为一个没有捕获的异常终止了run方法而意外死亡。</li></ul><h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><ul><li>线程的优先级<br>默认情况下，一个线程集成它的父线程的优先级，setPriority设置优先级。但是优先级是依赖于宿主机的，例如windows只有7个优先级，因此不要将程序依赖于优先级。</li><li>守护线程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程的run方法不能抛出任何被检测的异常, 但是，不被检测的异常会导致线程终止。在这种情况下，线程就死亡了。</span><br><span class="line">但是，不需要任何catch子句来处理可以被传播的异常。相反，就在线程死亡之前，异常被传递到一个用于未捕获异常的处理器。该处理器必须属于一个实现Thread.UncaughtExceptionHandler接口的类。这个接口只有一个方法。</span><br><span class="line">```void uncaughtException(Thread t, Throwable e)</span><br></pre></td></tr></table></figure></li></ul><p>从Java SE 5.0起, 可以用setUncaughtExceptionHandler方法为任何线程安装一个处理器。也可以用Thread类的静态方法setDefaultUncaughtExceptionHandler为所有线程安装一个默认的处理器。替换处理器可以使用日志API发送未捕获异常的报告到日志文件。如果不安装默认的处理器，默认的处理器为空。但是，如果不为独立的线程安装处理器，此时的处理器就是该线程的ThreadGroup对象。</p><ul><li>ReentrantLock</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&#125; <span class="keyword">final</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁是可重入的，锁保持一个持有计数(hold count)来跟踪对lock方法的嵌套调用。因此被保护的代码可以调用另一个使用相同锁的方法。</p><p>一个锁对象可以有一个或多个相关的条件对象，可以用newCondition方法获得一个条件对象，condition的await方法导致当前线程被阻塞，并放弃了锁，直到另一个线程调用了同一个条件的signalAll,等待该条件的所有线程继续去判断条件是否满足。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (...) &#123;</span><br><span class="line">    condition.await();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>object的wait和notifyAll等价于condition的awati和signalAll。使用synchronized关键字来编写代码要简洁得多，每一个对象有一个内部锁，并且该锁有一个内部条件。由锁来管理那些试图进入synchronized方法的线程，由条件来管理那些调用wait的线程。</p><p><img src="/2018/04/12/多线程/thread.png" alt="thread"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;interrupt方法可以用来请求终止线程，当对一个线程调用interrupt方法时，线程的中断状态将被置位，这是每一个线程都具有的boolean标志，每个线程都应该不时检查这个标志，以判断线程是否被中断。&lt;br&gt;isInterrupted方法可以用来判断中断状态是否被置位
      
    
    </summary>
    
    
      <category term="java核心技术" scheme="http://yoursite.com/tags/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>ClassLoader</title>
    <link href="http://yoursite.com/2018/04/11/ClassLoader/"/>
    <id>http://yoursite.com/2018/04/11/ClassLoader/</id>
    <published>2018-04-11T09:14:50.000Z</published>
    <updated>2018-04-16T02:43:53.741Z</updated>
    
    <content type="html"><![CDATA[<p>ClassLoader的具体作用就是将class文件加载到jvm虚拟机中，但是，jvm启动的时候，并不会一次性加载所有的class文件，而是根据需要去动态加载。</p><ol><li><p>BootstrapClassLoader</p><p> 最顶层的加载类，主要加载核心类库，%JRE_HOME%\lib下的rt.jar、resources.jar、charsets.jar和class等。另外需要注意的是可以通过启动jvm时指定-Xbootclasspath和路径来改变Bootstrap ClassLoader的加载目录。比如java -Xbootclasspath/a:path被指定的文件追加到默认的bootstrap路径中;-Xbootclasspath/p:path  让jvm优先于默认的bootstrap去加载path中指定的class。</p></li><li><p>ExtentionClassLoader</p><p> 扩展的类加载器，加载目录%JRE_HOME%\lib\ext目录下的jar包和class文件。还可以加载-D java.ext.dirs选项指定的目录。</p></li><li><p>AppClassLoader(SystemClassLoader)</p><p> 加载当前应用的classpath的所有类。</p></li></ol><h2 id="sun-misc-Launcher"><a href="#sun-misc-Launcher" class="headerlink" title="sun.misc.Launcher"></a>sun.misc.Launcher</h2><p>ExtClassLoader和AppClassLoader两个类定义在Launcher中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Launcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create the extension class loader</span></span><br><span class="line">        ClassLoader extcl;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            extcl = ExtClassLoader.getExtClassLoader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(</span><br><span class="line">                <span class="string">"Could not create extension class loader"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now create the class loader to use to launch the application</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loader = AppClassLoader.getAppClassLoader(extcl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(</span><br><span class="line">                <span class="string">"Could not create application class loader"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置AppClassLoader为线程上下文类加载器</span></span><br><span class="line">        Thread.currentThread().setContextClassLoader(loader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中可以看到ExtClassLoader被传入AppClassLoader的静态构造方法中，追踪该静态方法，可以看到最终传给了抽象父类ClassLoader的<code>private final ClassLoader parent;</code>域。</p><h2 id="父加载器"><a href="#父加载器" class="headerlink" title="父加载器"></a>父加载器</h2><p>每个类加载器都有一个父加载器，通过getParent()方法可以获得。之前已经看到AppClassLoader的父加载器就是ExtClassLoader，但是没有看到ExtClassLoader的父加载器是什么。</p><p>尝试一下打印ExtClassLoader的父加载器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.class.getClassLoader().getParent().getParent();<span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>看到结果是null，这和在Launcher中源码看到的一样，确实没有传入一个父加载器。但是ExtClassLoader</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ClassLoader的具体作用就是将class文件加载到jvm虚拟机中，但是，jvm启动的时候，并不会一次性加载所有的class文件，而是根据需要去动态加载。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;BootstrapClassLoader&lt;/p&gt;
&lt;p&gt; 最顶层的加载类，主要加
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="http://yoursite.com/2018/04/11/Java%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2018/04/11/Java反射/</id>
    <published>2018-04-11T09:11:35.000Z</published>
    <updated>2018-04-11T09:12:06.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ul><li><p>获取类名</p><ul><li>getName</li><li>getCanonicalName</li><li><p>getSimpleName</p><p>这里，getName()返回的是虚拟机里面的class的表示，而getCanonicalName()返回的是更容易理解的表示。其实对于大部分class来说这两个方法没有什么不同的。但是对于array，内部类，匿名内部类，lambda，代理类来说是有区别的。另外，类加载（虚拟机加载）的时候需要类的名字是getName。</p><p>内部类示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalClassConfig</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> String desc;  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalConfig</span> </span>&#123;  </span><br><span class="line">      &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用以下方法：</span></span><br><span class="line">ExternalClassConfig.class.getName()  <span class="comment">//my.ExternalClassConfig</span></span><br><span class="line">  ExternalClassConfig.class.getCanonicalName()  <span class="comment">//my.ExternalClassConfig</span></span><br><span class="line">  ExternalClassConfig.class.getSimpleName()  <span class="comment">//ExternalClassConfig</span></span><br><span class="line">    </span><br><span class="line">  InternalConfig.class.getName()  <span class="comment">//my.ExternalClassConfig$InternalConfig</span></span><br><span class="line"> InternalConfig.class.getCanonicalName()  <span class="comment">//my.ExternalClassConfig.InternalConfig</span></span><br><span class="line">  InternalConfig.class.getSimpleName() <span class="comment">//InternalConfig</span></span><br></pre></td></tr></table></figure></li></ul><p>  数组示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String [] ss = <span class="keyword">new</span> String[]&#123;  </span><br><span class="line">      <span class="string">"zw"</span>, <span class="string">"zz"</span>  </span><br><span class="line">  &#125;;  </span><br><span class="line">  <span class="comment">//‘[’ 表示数组，一个代表一维数组，比如 '[[' 代表二维数组。之后 'L' 代表类描述符，最后分号表示结束。这种编码叫做JNI字段描述符（JavaNative Interface FieldDescriptors)</span></span><br><span class="line">  ss.getClass().getName()  <span class="comment">// [Ljava.lang.String; </span></span><br><span class="line">  ss.getClass().getCanonicalName()  <span class="comment">// java.lang.String[]</span></span><br><span class="line">  ss.getClass().getSimpleName() <span class="comment">// String[]</span></span><br></pre></td></tr></table></figure><p>  java动态代理类：com.sun.proxy.$Proxy0</p><p>  匿名内部类：Test$1</p><p>  lambda： $$Lambda$1</p><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><ul><li>Java中新建对象的方法<ol><li>new</li><li>java.lang.Class#newInstance无参构造方法</li><li>clone</li><li>反序列化</li><li>java.lang.reflect.Constructor#newInstance可以调用有参构造方法</li></ol></li><li><p>得到构造函数</p><ol><li>getDeclaredConstructor：返回指定参数类型、所有声明的（包括private）构造函数</li><li>getConstructor：返回指定参数类型、具有public访问权限的构造函数</li><li>getDeclaredConstructors</li><li>getConstructors</li></ol><p>可变参数例子(注意String[].class和强转为Object)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarConstructorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VarConstructorTest</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"llll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Constructor&lt;VarConstructorTest&gt; constructor = VarConstructorTest.class.getDeclaredConstructor(String[].class);</span><br><span class="line">        VarConstructorTest varConstructorTest = constructor.newInstance((Object) <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类例子(注意和静态内部类不同)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NesteTest</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = NesteTest.class.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            <span class="comment">// reflect.StaticNestedTest$NesteTest(StaticNestedTest)</span></span><br><span class="line">            <span class="comment">// 内部类构造函数的第一个参数一定是指向外部类的对象</span></span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><ol><li>getFields</li><li>getField</li><li>getDeclaredFields</li><li>getDeclaredField</li></ol><p>declared代表本类，不包含父类域；没有declared则只能获得public域，但可以获得父类域。</p><p>对对象的get/set方法以外。还有对基本类型的getBoolean/setBoolean,getInt/setInt,getDouble/setDouble等。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><ol><li>getMethods</li><li>getMethod</li><li>getDeclaredMethods</li><li>getDeclaredMethod</li></ol><p>可以通过invoke方法反射调用该方法。和Field一样，对私有方法的调用必须先通过setAccessible(true)设置访问权限。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="java-lang-reflect-Array"><a href="#java-lang-reflect-Array" class="headerlink" title="java.lang.reflect.Array"></a>java.lang.reflect.Array</h3><p>newInstance创建新数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] a = (String[]) Array.newInstance(String.class, <span class="number">10</span>);</span><br><span class="line">Array.set(a, <span class="number">0</span>, <span class="string">"test"</span>);</span><br><span class="line">(String)Array.get(a, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] b = (<span class="keyword">int</span>[][]) Array.newInstance(<span class="keyword">int</span>.class, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span>[][] c = (<span class="keyword">int</span>[][]) Array.newInstance(<span class="keyword">int</span>[].class, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="AccessibleObject"><a href="#AccessibleObject" class="headerlink" title="AccessibleObject"></a>AccessibleObject</h2><p>Field,Method和Constructor都继承自该接口，调用该接口的setAccessible可以设置访问权限。</p><h2 id="ReflectiveOperationException"><a href="#ReflectiveOperationException" class="headerlink" title="ReflectiveOperationException"></a>ReflectiveOperationException</h2><p>反射操作抛出的异常父类，包括ClassNotFoundException，NoSuchFieldException，NoSuchMethodException，InvocationTargetException等。</p><h2 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h2><p>动态代理可以在运行时动态实现多个接口，而不需要在源代码中通过implements关键词来声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">test</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestInterface o;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyTest</span><span class="params">(TestInterface o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o = o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">        Object result = method.invoke(o, args);</span><br><span class="line">        System.out.println(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestInterface t = <span class="keyword">new</span> TestInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ProxyTest handler = <span class="keyword">new</span> ProxyTest(t);</span><br><span class="line">        TestInterface p = (TestInterface) Proxy.newProxyInstance(ProxyTest.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;TestInterface.class&#125;, handler);</span><br><span class="line">        p.test(<span class="string">"sss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InvocationHandler第一个参数proxy的使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Account</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">deposit</span> <span class="params">(<span class="keyword">double</span> value)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span> <span class="params">()</span></span>;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span> <span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"deposit"</span>.equals(method.getName())) &#123;  </span><br><span class="line">            Double value = (Double) args[<span class="number">0</span>];  </span><br><span class="line">            System.out.println(<span class="string">"deposit: "</span> + value);  </span><br><span class="line">            balance += value;  </span><br><span class="line">            <span class="keyword">return</span> proxy; </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"getBalance"</span>.equals(method.getName())) &#123;  </span><br><span class="line">            <span class="keyword">return</span> balance;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">Account account = (Account) Proxy.newProxyInstance(getClass().getClassLoader(), <span class="keyword">new</span> Class[] &#123;Account.class&#125;,  <span class="keyword">new</span> ExampleInvocationHandler());  </span><br><span class="line">account.deposit(<span class="number">5000</span>).deposit(<span class="number">4000</span>).deposit(-<span class="number">2500</span>);  </span><br><span class="line">System.out.println(<span class="string">"Balance: "</span> + account.getBalance());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取类名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getName&lt;/li&gt;
&lt;li&gt;getCanonicalNa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个有趣的类加载顺序</title>
    <link href="http://yoursite.com/2018/04/11/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/04/11/一个有趣的类加载顺序/</id>
    <published>2018-04-11T08:44:44.000Z</published>
    <updated>2018-04-12T12:40:56.722Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        staticFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> StaticTest st = <span class="keyword">new</span> StaticTest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticTest() &#123;</span><br><span class="line">        System.out.println(<span class="string">"3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">112</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制粘贴，在idea上一跑，先看看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">a=110,b=0</span><br><span class="line">1</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>仔细分析一下，加载StaticTest.class时，先按照顺序执行statis语句，但第一个statis语句是static StaticTest st = new StaticTest();,此时类还没加载完成，但是已经需要生成一个该类的对象，所以按照顺序执行非静态语句：打印2，给a赋值110，然后进入构造函数，打印3和a，b，注意b尚未被赋值，所以是初始化的值。然后才会执行余下的statis语句，打印2，给b赋值112，最后进入main方法打印4。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        staticFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> StaticTest st = <span class="keyword">new</span> StaticTest();<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);<span class="comment">//5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"2"</span>);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticTest() &#123;<span class="comment">//4</span></span><br><span class="line">        System.out.println(<span class="string">"3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4"</span>);<span class="comment">//6</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">110</span>;<span class="comment">//3</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">112</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>java语法知识</title>
    <link href="http://yoursite.com/2018/04/04/java%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/04/04/java语法知识/</id>
    <published>2018-04-04T07:34:41.000Z</published>
    <updated>2018-04-12T12:30:42.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Switch-String"><a href="#Switch-String" class="headerlink" title="Switch String"></a>Switch String</h2><p>switch支持String类型，实现原理是编译器进行转换：</p><ol><li>只有一个case语句：将其转换成一个if语句</li><li>一个case和一个default语句：转换为if-else</li><li>多个case：不变，仍然是case，但是string转换为hash值，并在case内部再通过String.equals做判断</li></ol><h2 id="二进制数值"><a href="#二进制数值" class="headerlink" title="二进制数值"></a>二进制数值</h2><p>0B或者0b的前缀表明是二进制数值，0B011001表示25</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>优先推荐使用非受检异常RuntimeException</li><li>Throwable支持在构造方法中传入另一个异常作为参数，通过getCause方法获取</li><li>在finally中抛出的异常会抑制本来需要抛出的异常，即上层只能看到finally中抛出的异常。通过java.lang.Throwable#addSuppressed方法可以将被抑制的异常类添加到list中被带出。通过源码可知该list初始化时通过java.util.Collections#unmodifiableList修饰为不可变list保证不会在不知情的情况下被添加类抑制异常，如果有添加被抑制异常类，则会再次初始化。</li><li>catch多个相同处理方式的异常类，通过 | 分隔。这些一同被catch的异常不能相同且有子类关系时需保证子类在前。</li></ul><h2 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath))) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源的申请在try语句中，释放则自动完成。如果出现异常，不论异常是在try中还是在资源的释放时，最终抛出的异常都是try中的异常，而如果有资源释放时发生的异常则会被添加进抛出异常的抑制异常列表，即被java.lang.Throwable#addSuppressed方法添加。</p><p>try管理的资源需实现java.lang.AutoCloseable接口，否则会出现编译错误。I/O操作的java.io.Closeable接口已经实现该接口。</p><p>在try-with-resource中也可以添加catch语句块，其中可以捕获try语句块和资源释放时发生的异常。</p><p>try-with-resource可以管理多个资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Switch-String&quot;&gt;&lt;a href=&quot;#Switch-String&quot; class=&quot;headerlink&quot; title=&quot;Switch String&quot;&gt;&lt;/a&gt;Switch String&lt;/h2&gt;&lt;p&gt;switch支持String类型，实现原理是编译器进
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="http://yoursite.com/2018/04/04/ThreadLocal/"/>
    <id>http://yoursite.com/2018/04/04/ThreadLocal/</id>
    <published>2018-04-04T02:34:43.000Z</published>
    <updated>2018-04-19T12:05:37.972Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal在项目中使用到的情况比较少，只知道可以做到线程隔离。如果某个对象可能产生并发错误，那么常规解决方案就是对其加锁，另一种思路就是使用ThreadLocal保证线程隔离。</p><p>首先查看ThreadLocal的get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//当前线程持有的ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//得到ThreadLocalMap中键为当前ThreadLocal的条目</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的理解就是，一个线程和一个ThreadLocal对应了一个唯一的对象。</p><p>继续深入查看下去，getMap返回的就是线程对象持有的ThreadLocalMap，这个类虽然没有继承Map接口，但是现在可以把它当作map来看待，它的键值是ThreadLocal类。当这个map不为空时，就从它取出来数据，当它为空时，调用setInitialValue方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//initialValue默认返回null</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//设置默认的初始值</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//创建ThreadLocalMap插入默认初始值并设置给当前线程t</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p>之前说了ThreadLocalMap并不是Map，它是ThreadLocal的内部静态类，内部存储的数据结构是一个Entry数组。Entry继承自WeakReference&lt;ThreadLocal&lt;?&gt;&gt;，并持有一个value对象。</p><p>现在的问题就是ThreadLocalMap是怎么通过一个ThreadLocal对象来找到对应的Entry数组下标？</p><p>重新查看createMap方法，调用了ThreadLocalMap的一个构造方法。ThreadLocalMap共有两个构造方法，另一个private的构造方法是为了InheritableThreadLocal设计的，此处不介绍。查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    <span class="comment">//初始化Entry数组，大小为16</span></span><br><span class="line">    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">    <span class="comment">//计算得到下标</span></span><br><span class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//创建条目放入该下标位置</span></span><br><span class="line">    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//设置临界值为数组长度的2/3</span></span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介绍一下这个计算的方法，threadLocalHashCode是每个ThreadLocal对象初始化时得到的一个值，这个值是0x61c88647的倍数。INITIAL_CAPACITY是数组的长度，通过保证数组长度永远是2的n次方，从而保证其减去一得到的二进制是一串全部为1长度为n的数字，与其做&amp;操作就可以理解为取二进制最后n位。而0x61c88647，与fibonacci hashing(斐波那契散列法)以及黄金分割有关，特殊的哈希码0x61c88647大大降低碰撞的几率，能让哈希码能均匀的分布在2的N次方的数组里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> l = (<span class="keyword">long</span>) ((<span class="number">1L</span> &lt;&lt; <span class="number">31</span>) * (Math.sqrt(<span class="number">5</span>) - <span class="number">1</span>));  <span class="comment">//Math.sqrt(5) - 1 = 1.2360679774997898</span></span><br><span class="line">System.out.println(<span class="string">"as 32 bit unsigned: "</span> + l);  <span class="comment">//2654435769</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>) l;</span><br><span class="line">System.out.println(<span class="string">"as 32 bit signed:   "</span> + i);  <span class="comment">//-1640531527 = -0x61c88647</span></span><br></pre></td></tr></table></figure><p>查看ThreadLocalMap的getEntry方法，发现就是通过该计算方式来得到数组下标的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">    Entry e = table[i];</span><br><span class="line">    <span class="comment">//条目非空且弱引用的ThreadLocal等于入参</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个ThreadLocal都不同的一个值，通过该值计算数组下标，该值为HASH_INCREMENT的倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</span><br><span class="line">        <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该值保证了冲突发生的概率是极低的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadLocal的默认返回值为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个指定工厂方法产生默认值的ThreadLocal</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ThreadLocal&lt;S&gt; <span class="title">withInitial</span><span class="params">(Supplier&lt;? extends S&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuppliedThreadLocal&lt;&gt;(supplier);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取当前线程的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//得到当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//得到当前线程中的ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="comment">//如果ThreadLocalMap不为空则取数据</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回默认值</span></span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//得到默认值</span></span><br><span class="line">        T value = initialValue();</span><br><span class="line">        <span class="comment">//当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//当前线程的ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="comment">//不为空则设置</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//为空则创建并设置</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="comment">//返回默认值</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前线程的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//当前线程的ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消当前线程中该ThreadLocal保存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">         <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">             m.remove(<span class="keyword">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到指定线程的ThreadLocalMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建ThreadLocalMap并设置给指定线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅被Thread的构造方法调用</span></span><br><span class="line"><span class="comment">     * 使创建的新线程的ThreadLocalMap有父线程的ThreadLocalMap的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ThreadLocalMap <span class="title">createInheritedMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadLocalMap(parentMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal重写了该方法</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal被用来给子线程配置父线程相同的值map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">childValue</span><span class="params">(T parentValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定工厂方法创建默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SuppliedThreadLocal</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Supplier&lt;? extends T&gt; supplier;</span><br><span class="line"></span><br><span class="line">        SuppliedThreadLocal(Supplier&lt;? extends T&gt; supplier) &#123;</span><br><span class="line">            <span class="keyword">this</span>.supplier = Objects.requireNonNull(supplier);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> supplier.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread中存储ThreadLocal数据的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 该map的条目类，键值为ThreadLocal，且是弱引用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 默认初始化数组长度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 存储数据的数组，长度保证为2^n</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数组中实际数据的数量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据量的阈值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置数据量的阈值为长度的2/3</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回数组的下一个下标，最后一个的下一个下标为0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上一个下标</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化ThreadLocalMap，并设置第一个键值对</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">            <span class="comment">//通过hash算法得到数组下标</span></span><br><span class="line">            <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//设置阈值</span></span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 继承所有传入ThreadLocalMap值的ThreadLocalMap</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">            Entry[] parentTable = parentMap.table;</span><br><span class="line">            <span class="keyword">int</span> len = parentTable.length;</span><br><span class="line">            setThreshold(len);</span><br><span class="line">            table = <span class="keyword">new</span> Entry[len];</span><br><span class="line">            <span class="comment">//遍历传入值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                Entry e = parentTable[j];</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();</span><br><span class="line">                    <span class="comment">//保证条目键值非空</span></span><br><span class="line">                    <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Object value = key.childValue(e.value);</span><br><span class="line">                        Entry c = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">                        <span class="keyword">int</span> h = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">while</span> (table[h] != <span class="keyword">null</span>)</span><br><span class="line">                            h = nextIndex(h, len);</span><br><span class="line">                        table[h] = c;</span><br><span class="line">                        size++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 得到指定ThreadLocal键值的条目</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果在应该在的位置没有找到的话，会调用这个方法去寻找</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                <span class="keyword">if</span> (k == key)</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    i = nextIndex(i, len);</span><br><span class="line">                e = tab[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置键值对</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We don't use a fast path as with get() because it is at</span></span><br><span class="line">            <span class="comment">// least as common to use set() to create new entries as</span></span><br><span class="line">            <span class="comment">// it is to replace existing ones, in which case, a fast</span></span><br><span class="line">            <span class="comment">// path would fail more often than not.</span></span><br><span class="line"></span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">                 e != <span class="keyword">null</span>;</span><br><span class="line">                 e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                    e.value = value;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    replaceStaleEntry(key, value, i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">            <span class="keyword">int</span> sz = ++size;</span><br><span class="line">            <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">                rehash();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清除指定key的条目</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">                 e != <span class="keyword">null</span>;</span><br><span class="line">                 e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">                    e.clear();</span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Replace a stale entry encountered during a set operation</span></span><br><span class="line"><span class="comment">         * with an entry for the specified key.  The value passed in</span></span><br><span class="line"><span class="comment">         * the value parameter is stored in the entry, whether or not</span></span><br><span class="line"><span class="comment">         * an entry already exists for the specified key.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * As a side effect, this method expunges all stale entries in the</span></span><br><span class="line"><span class="comment">         * "run" containing the stale entry.  (A run is a sequence of entries</span></span><br><span class="line"><span class="comment">         * between two null slots.)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  key the key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  value the value to be associated with key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  staleSlot index of the first stale entry encountered while</span></span><br><span class="line"><span class="comment">         *         searching for key.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            Entry e;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Back up to check for prior stale entry in current run.</span></span><br><span class="line">            <span class="comment">// We clean out whole runs at a time to avoid continual</span></span><br><span class="line">            <span class="comment">// incremental rehashing due to garbage collector freeing</span></span><br><span class="line">            <span class="comment">// up refs in bunches (i.e., whenever the collector runs).</span></span><br><span class="line">            <span class="keyword">int</span> slotToExpunge = staleSlot;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = prevIndex(staleSlot, len);</span><br><span class="line">                 (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">                 i = prevIndex(i, len))</span><br><span class="line">                <span class="keyword">if</span> (e.get() == <span class="keyword">null</span>)</span><br><span class="line">                    slotToExpunge = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Find either the key or trailing null slot of run, whichever</span></span><br><span class="line">            <span class="comment">// occurs first</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = nextIndex(staleSlot, len);</span><br><span class="line">                 (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">                 i = nextIndex(i, len)) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If we find key, then we need to swap it</span></span><br><span class="line">                <span class="comment">// with the stale entry to maintain hash table order.</span></span><br><span class="line">                <span class="comment">// The newly stale slot, or any other stale slot</span></span><br><span class="line">                <span class="comment">// encountered above it, can then be sent to expungeStaleEntry</span></span><br><span class="line">                <span class="comment">// to remove or rehash all of the other entries in run.</span></span><br><span class="line">                <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                    e.value = value;</span><br><span class="line"></span><br><span class="line">                    tab[i] = tab[staleSlot];</span><br><span class="line">                    tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Start expunge at preceding stale entry if it exists</span></span><br><span class="line">                    <span class="keyword">if</span> (slotToExpunge == staleSlot)</span><br><span class="line">                        slotToExpunge = i;</span><br><span class="line">                    cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If we didn't find stale entry on backward scan, the</span></span><br><span class="line">                <span class="comment">// first stale entry seen while scanning for key is the</span></span><br><span class="line">                <span class="comment">// first still present in the run.</span></span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">                    slotToExpunge = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If key not found, put new entry in stale slot</span></span><br><span class="line">            tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">            tab[staleSlot] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If there are any other stale entries in run, expunge them</span></span><br><span class="line">            <span class="keyword">if</span> (slotToExpunge != staleSlot)</span><br><span class="line">                cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清除指定位置的无效条目，并将该位置之后连续的条目放入应该的位置</span></span><br><span class="line"><span class="comment">         * 譬如说之前有一个条目e应该放入的位置是staleSlot，</span></span><br><span class="line"><span class="comment">         * 但是由于该位置已经被占据了，所以放到了下一个非空的位置，</span></span><br><span class="line"><span class="comment">         * 现在staleSlot位置的条目被清除了，那么就应该将这之后包括e再次计算放入应该放入的位置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清除无效的条目</span></span><br><span class="line">            tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">            tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Rehash until we encounter null</span></span><br><span class="line">            Entry e;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">                 (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">                 i = nextIndex(i, len)) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    e.value = <span class="keyword">null</span>;</span><br><span class="line">                    tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                    size--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//该条目应该放入的位置和现在所在的位置不同</span></span><br><span class="line">                    <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                        tab[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//从该条目应该在的位置开始扫描知道下一个为空的位置</span></span><br><span class="line">                        <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                            h = nextIndex(h, len);</span><br><span class="line">                        tab[h] = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清除一些无用条目</span></span><br><span class="line"><span class="comment">         * 从i开始扫描，最佳情况扫描log2(n)次</span></span><br><span class="line"><span class="comment">         * 每次扫描到一个无用条目，则会重置n为数组长度，继续扫描</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                i = nextIndex(i, len);</span><br><span class="line">                Entry e = tab[i];</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    n = len;</span><br><span class="line">                    removed = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//清理该位置条目，并返回该位置之后第一个为空的位置</span></span><br><span class="line">                    i = expungeStaleEntry(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> removed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清除所有无效条目</span></span><br><span class="line"><span class="comment">         * 确认当前大小是否超过阈值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">                resize();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数组扩张两倍，保证了长度永远是2^n</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry[] oldTab = table;</span><br><span class="line">            <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">            <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">            Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">                Entry e = oldTab[j];</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                            h = nextIndex(h, newLen);</span><br><span class="line">                        newTab[h] = e;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setThreshold(newLen);</span><br><span class="line">            size = count;</span><br><span class="line">            table = newTab;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清除所有无效条目</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                Entry e = tab[j];</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>)</span><br><span class="line">                    expungeStaleEntry(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ThreadLocal在项目中使用到的情况比较少，只知道可以做到线程隔离。如果某个对象可能产生并发错误，那么常规解决方案就是对其加锁，另一种思路就是使用ThreadLocal保证线程隔离。&lt;/p&gt;
&lt;p&gt;首先查看ThreadLocal的get方法：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>计算二维数组每列的最大值</title>
    <link href="http://yoursite.com/2018/04/03/%E8%AE%A1%E7%AE%97%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%AF%8F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://yoursite.com/2018/04/03/计算二维数组每列的最大值/</id>
    <published>2018-04-03T13:15:38.000Z</published>
    <updated>2018-04-12T12:40:53.746Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] maxIncol(<span class="keyword">int</span>[][] arr) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] res = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">int</span>[] temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">if</span> (res.length &lt; temp.length) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;res.length; j++) &#123;</span><br><span class="line">                    temp[j] = Math.max(res[j], temp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                res = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;temp.length; j++) &#123;</span><br><span class="line">                    res[j] = Math.max(res[j], temp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
